;*----------------------------------------------------------------------------
;*  mth_trif.c -- MTH ���C�u���� �O�p�֐� ���W���[��
;*  Copyright(c) 1994 SEGA
;*  Written by H.E on 1994-04-28 Ver.0.80
;*  Updated by H.E on 1994-04-28 Ver.0.80
;*
;*  ���̃��C�u�����͐��w�v�Z���C�u�����̎O�p�֐� �����[���ŁA
;*  �ȉ��̃��[�`�����܂ށB
;*
;*  MTH_Sin                 -  �������֐�
;*  MTH_Cin                 -  �������֐�
;*  MTH_Atan                -  ���������֐�
;*
;*----------------------------------------------------------------------------
;
          .EXPORT     _MTH_Sin
          .EXPORT     _MTH_Cos
          .EXPORT     _MTH_Atan
          .EXPORT     _fsin
          .EXPORT     _fcos
          .SECTION    SEGA_P,CODE,ALIGN=4
;
;
;*****************************************************************************
;*
;* NAME:  MTH_Sin()  - Return Sin Value
;*
;*     Fixed32 MTH_Sin(Fixed32 degree);
;*
;* PARAMETERS :
;*
;* �@�@(1) Fixed32   degree - <i> -180.0 ���� 180.0 �܂ł̊p�x
;*
;* DESCRIPTION:
;*
;*     �w��p�x�� sin�l��Ԃ�
;*
;*
;* POSTCONDITIONS:
;*
;*     Fixed32 sin�l
;*
;* CAVEATS:
;*
;*****************************************************************************
;
_MTH_Sin:                              ; function: MTH_Sin
          MOV.L       R14,@-R15        ; R4  : degree
          STS.L       PR,@-R15         ; R14 : sign
;
          CMP/PZ      R4               ; if(degree >= MTH_FIXED(0))
          BT/S        sin_0            ;    sign = 0 
          MOV         #0,R14           ;    goto sin_0
          MOV         #1,R14           ; sign = 1
          NEG         R4,R4            ; degree  = -degree
sin_0:
          MOV.L       sin_f180,R2      ; R2 = MTH_FIXED(180)
          CMP/GE      R2,R4            ; if(degree < R2)
          BF          sin_1            ;    goto sin_1
          BRA         sin_2            ; degree = MTH_FIXED(0)
          MOV         #0,R4            ; goto sin_2
sin_1:
          MOV.L       sin_f90,R3       ; R3 = MTH_FIXED(90)
          CMP/GT      R3,R4            ; if(degree <= R3)
          BF          sin_2            ;    goto sin_2
          SUB         R4,R2            ; 
          MOV         R2,R4            ; degree = R2 - degree
sin_2:
          MOV.L       fsin,R3
          JSR         @R3              ; R0 = fsin(degree)
          NOP
          TST         R14,R14          ; if(sign == 0)
          BT          sin_3            ;    goto sin_3
          NEG         R0,R0            ; R0 = -R0
sin_3:
          LDS.L       @R15+,PR
          RTS                          ; return R0
          MOV.L       @R15+,R14
;
	  .ALIGN      4
sin_f180: .DATA.L     H'00B40000       ; MTH_FIXED(180)
sin_f90:  .DATA.L     H'005A0000       ; MTH_FIXED(90)
fsin:     .DATA.L     _fsin
;
;
;*****************************************************************************
;*
;* NAME:  MTH_Cos()  - Return Cos Value
;*
;*     Fixed32 MTH_Cos(Fixed32 degree);
;*
;* PARAMETERS :
;*
;* �@�@(1) Fixed32   degree - <i> -180.0 ���� 180.0 �܂ł̊p�x
;*
;* DESCRIPTION:
;*
;*     �w��p�x�� cos�l��Ԃ�
;*
;*
;* POSTCONDITIONS:
;*
;*     Fixed32 cos�l
;*
;* CAVEATS:
;*
;*****************************************************************************
;
_MTH_Cos:                              ; function: MTH_Cos
          MOV.L       R14,@-R15        ; R4  : degree
          STS.L       PR,@-R15         ; R14 : sign
;
          CMP/PZ      R4               ; if(degree >= MTH_FIXED(0))
          BT          cos_0            ;    goto cos_0
          NEG         R4,R4            ; degree = -degree
cos_0:
          MOV.L       cos_f180,R2      ; R2 = MTH_FIXED(180)
          CMP/GE      R2,R4            ; sin = 1
          BF/S        cos_1            ; if(degree < MTH_FIXED(180))
          MOV         #1,R14           ;    goto cos_1
          BRA         cos_4            ; degree = MTH_FIXED(0)
          MOV         #0,R4            ; goto cos_4
cos_1:
          MOV.L       cos_f90,R2       ; R2 = MTH_FIXED(90)
          CMP/GT      R2,R4            ; if(degree > MTH_FIXED(90))
          BF          cos_2            ;    goto cos_2
          MOV.L       cos_f180,R2      ; R2 = MTH_FIXED(180)
          SUB         R4,R2            ; R2 -= degree
          BRA         cos_4            ; degree = R2
          MOV         R2,R4            ; goto cos_4
cos_2:
          MOV         #0,R14           ; sign = 0
cos_4:
          MOV.L       fcos,R3
          JSR         @R3              ; R0 = fcos(degree)
          NOP
          TST         R14,R14          ; if(sign == 0)
          BT          cos_5            ;    goto cos_5
          NEG         R0,R0            ; R0 = -R0
cos_5:
          LDS.L       @R15+,PR
          RTS                          ; return R0
          MOV.L       @R15+,R14
;
	  .ALIGN      4
cos_f180: .DATA.L     H'00B40000       ; MTH_FIXED(180)
cos_f90:  .DATA.L     H'005A0000       ; MTH_FIXED(90)
fcos:     .DATA.L     _fcos
;
;
;*****************************************************************************
;*
;*      Cosine(a) Subroutine
;*      Cosine(a) = Sine(90-a)
;*      In :a		(R4)
;*      Out:Cosine(a)   (R0)
;*
;*****************************************************************************
_fcos:
	MOV.L	NINTY,R2	;90-a ->R4
	NEG	R4,R4
	ADD	R2,R4
;
;
;*****************************************************************************
;*
;*      Sine (a) Subroutine 
;*      In:a = angle (0 - 89)(R4)
;*      Out:Sine(a)          (R0)
;*
;*****************************************************************************
;
_fsin:
	MOVA	SINTBL,R0	;sine table start address ->R1	
	STS	MACL,R3

	SWAP.W	R4,R1
	EXTU.W	R1,R1
	SHLL2	R1		;R0<-Entry of The Table
	MOV.W	@(R0,R1),R2	;sin(a) GRAD->R2

	ADD	#2,R0
	MULU	R4,R2
	MOV.W	@(R0,R1),R0	;sin(a) value->R0
	STS	MACL,R2
	EXTU.W	R0,R0
	LDS	R3,MACL
	SWAP.W	R2,R2
	EXTU.W	R2,R2
	RTS
	ADD	R2,R0
;
;	Constant Data definiton
	.ALIGN	4
NINTY	.DATA.L	H'005A0000	;90
;Sine Table Data Area(AREA SIZE = 91 x 2 x 2 = 364BYTES
;	 ALIGN=4
SINTBL:
;	         delta, value 
	.DATA.W	H'0477,H'0000		;00deg
	.DATA.W	H'0478,H'0477		;01deg
	.DATA.W	H'0476,H'08EF		;02deg
	.DATA.W	H'0476,H'0D65		;03deg
	.DATA.W	H'0474,H'11DB		;04deg
	.DATA.W	H'0473,H'164F		;05deg
	.DATA.W	H'0470,H'1AC2		;06deg
	.DATA.W	H'046E,H'1F32		;07deg
	.DATA.W	H'046C,H'23A0		;08deg
	.DATA.W	H'0468,H'280C		;09deg
	.DATA.W	H'0464,H'2C74		;10deg
	.DATA.W	H'0461,H'30D8		;11deg
	.DATA.W	H'045D,H'3539		;12deg
	.DATA.W	H'0458,H'3996		;13deg
	.DATA.W	H'0453,H'3DEE		;14deg
	.DATA.W	H'044F,H'4241		;15deg
	.DATA.W	H'0448,H'4690		;16deg
	.DATA.W	H'0443,H'4AD8		;17deg
	.DATA.W	H'043D,H'4F1B		;18deg
	.DATA.W	H'0436,H'5358		;19deg
	.DATA.W	H'0430,H'578E		;20deg
	.DATA.W	H'0428,H'5BBE		;21deg
	.DATA.W	H'0420,H'5FE6		;22deg
	.DATA.W	H'0419,H'6406		;23deg
	.DATA.W	H'0411,H'681F		;24deg
	.DATA.W	H'0409,H'6C30		;25deg
	.DATA.W	H'03FF,H'7039		;26deg
	.DATA.W	H'03F7,H'7438		;27deg
	.DATA.W	H'03ED,H'782F		;28deg
	.DATA.W	H'03E3,H'7C1C		;29deg
	.DATA.W	H'03DA,H'7FFF		;30deg
	.DATA.W	H'03CF,H'83D9		;31deg
	.DATA.W	H'03C5,H'87A8		;32deg
	.DATA.W	H'03BA,H'8B6D		;33deg
	.DATA.W	H'03AE,H'8F27		;34deg
	.DATA.W	H'03A4,H'92D5		;35deg
	.DATA.W	H'0397,H'9679		;36deg
	.DATA.W	H'038B,H'9A10		;37deg
	.DATA.W	H'0380,H'9D9B		;38deg
	.DATA.W	H'0372,H'A11B		;39deg
	.DATA.W	H'0366,H'A48D		;40deg
	.DATA.W	H'0359,H'A7F3		;41deg
	.DATA.W	H'034B,H'AB4C		;42deg
	.DATA.W	H'033E,H'AE97		;43deg
	.DATA.W	H'032F,H'B1D5		;44deg
	.DATA.W	H'0322,H'B504		;45deg
	.DATA.W	H'0313,H'B826		;46deg
	.DATA.W	H'0305,H'BB39		;47deg
	.DATA.W	H'02F6,H'BE3E		;48deg
	.DATA.W	H'02E7,H'C134		;49deg
	.DATA.W	H'02D8,H'C41B		;50deg
	.DATA.W	H'02C8,H'C6F3		;51deg
	.DATA.W	H'02B8,H'C9BB		;52deg
	.DATA.W	H'02A8,H'CC73		;53deg
	.DATA.W	H'0298,H'CF1B		;54deg
	.DATA.W	H'0288,H'D1B3		;55deg
	.DATA.W	H'0278,H'D43B		;56deg
	.DATA.W	H'0266,H'D6B3		;57deg
	.DATA.W	H'0256,H'D919		;58deg
	.DATA.W	H'0244,H'DB6F		;59deg
	.DATA.W	H'0234,H'DDB3		;60deg
	.DATA.W	H'0221,H'DFE7		;61deg
	.DATA.W	H'0211,H'E208		;62deg
	.DATA.W	H'01FE,H'E419		;63deg
	.DATA.W	H'01EC,H'E617		;64deg
	.DATA.W	H'01DB,H'E803		;65deg
	.DATA.W	H'01C8,H'E9DE		;66deg
	.DATA.W	H'01B5,H'EBA6		;67deg
	.DATA.W	H'01A4,H'ED5B		;68deg
	.DATA.W	H'0190,H'EEFF		;69deg
	.DATA.W	H'017E,H'F08F		;70deg
	.DATA.W	H'016B,H'F20D		;71deg
	.DATA.W	H'0158,H'F378		;72deg
	.DATA.W	H'0145,H'F4D0		;73deg
	.DATA.W	H'0131,H'F615		;74deg
	.DATA.W	H'011F,H'F746		;75deg
	.DATA.W	H'010B,H'F865		;76deg
	.DATA.W	H'00F7,H'F970		;77deg
	.DATA.W	H'00E4,H'FA67		;78deg
	.DATA.W	H'00D1,H'FB4B		;79deg
	.DATA.W	H'00BD,H'FC1C		;80deg
	.DATA.W	H'00A9,H'FCD9		;81deg
	.DATA.W	H'0095,H'FD82		;82deg
	.DATA.W	H'0081,H'FE17		;83deg
	.DATA.W	H'006E,H'FE98		;84deg
	.DATA.W	H'005A,H'FF06		;85deg
	.DATA.W	H'0046,H'FF60		;86deg
	.DATA.W	H'0032,H'FFA6		;87deg
	.DATA.W	H'001E,H'FFD8		;88deg
	.DATA.W	H'000A,H'FFF6		;89deg
	.DATA.W	H'0000,H'FFFF		;90deg
;
;
;*****************************************************************************
;*
;* NAME:  MTH_Atan()  - Return Atan Value
;*
;*     Fixed32 MTH_Atan(Fixed32 y, Fixed32 x);
;*
;* PARAMETERS :
;*
;* �@�@(1) Fixed32   y     - <i> -1.0 ���� 1.0 �܂ł̍���
;* �@�@(2) Fixed32   x     - <i> -1.0 ���� 1.0 �܂ł̒��
;*
;* DESCRIPTION:
;*
;*     �w�� x, y �l����p�x��Ԃ�
;*
;*
;* POSTCONDITIONS:
;*
;*     Fixed32 -180.0 ���� 180.0 �܂ł̊p�x
;*
;* CAVEATS:
;*
;*****************************************************************************
;
_MTH_Atan:                       ; function: MTH_Atan
          MOV.L       R14,@-R15
          MOV.L       R13,@-R15
          MOV.L       R12,@-R15
          MOV.L       R11,@-R15
          MOV.L       R10,@-R15
          MOV.L       R9,@-R15
 	  STS.L	      MACH,@-R15
 	  STS.L	      MACL,@-R15
          MOV         R5,R10           ; R10 = x
          STS.L       PR,@-R15
;
          MOV.L       rTanTbl,R11      ; R11 = tanTbl pointer

          CMP/PZ      R10              ; R12 = y
          BT/S        atan_0           ; if(x >= 0)
          MOV         R4,R12           ;    goto atan_0
          NEG         R10,R5           ; R5 : ax = -x
atan_0:
          CMP/PZ      R12              ; if(y >= 0)
          BT          atan_2           ;    goto atan_2
          NEG         R12,R4           ; R4 : ay = -y
atan_2:                             
          MOV         #65,R2           ; R2 = MTH_FIXED(0.001)
          CMP/GE      R2,R5            ; if(ax >= R2)
          BT          atan_4           ;    goto atan_4
          MOV.L       atan_fmax,R13    ; R13 : w =  0x7fff0000
          BRA         atan_5           ; goto atan_5
          NOP
atan_4:
	  MOV.L	      A_DIV,R0
	  SWAP.W      R4,R2	       ; make R2:R4 64bit pair
	  MOV.L	      R5,@R0
	  EXTS.W      R2,R2            ;  0  R4H   R4L  0
	  MOV.L	      R2,@(H'10,R0)
	  SHLL16      R4
	  MOV.L	      R4,@(H'14,R0)
 	  MOV.L	      @(H'14,R0),R13   ; R13 : w = ay / ax
atan_5:
          MOV         #0,R4            ; R4 : left  = 0
          MOV         #90,R5           ; R5 : right = 90
atan_6:
          MOV         R4,R14
          ADD         R5,R14
          SHAR        R14              ; R14 : mid = (left + right) >> 1
          MOV         R14,R0
          SHLL2       R0
          SHLL        R0               ; R0 = mid * 8
          MOV.L       @(R0,R11),R2     ; R2 = tanTbl[mid].val
          CMP/GT      R13,R2           ; if(R2 > w)
          BT          atan_7           ;    goto atan_7
          MOV         R14,R4
          ADD         #1,R4            ; R4 : left = mid + 1
          MOV         R4,R0
          SHLL2       R0
          SHLL        R0               ; R0 = left * 8
          MOV.L       @(R0,R11),R3     ; R2 = tanTbl[left].val
          CMP/GE      R3,R13           ; if(w >= R3)
          BT          atan_8           ;    goto atan_8
          BRA         atan_9           ; goto atan_9 (break)
          NOP
atan_7:
          MOV         R14,R5           ; R5 : right = mid
atan_8:
          CMP/GE      R5,R4            ; if(left < right)
          BF          atan_6           ;   goto atan_6
atan_9:
          MOV         R14,R0           ; R0 : mid
          MOV         R13,R4           ; R4 : w
          SHLL2       R0
          SHLL        R0               ; R0 = mid * 8
          MOV.L       @(R0,R11),R3     ; R3 = tanTbl[mid].val
          SUB         R3,R4            ; R4 : w - R3
          ADD         #4,R0
          MOV.L       @(R0,R11),R5     ; R5 : tanTbl[mid].k
	  DMULS.L     R4,R5
 	  STS	      MACH,R3
 	  STS	      MACL,R4
 	  XTRCT	      R3,R4	       ; R4 : degree = MTH_Mul(R4,R5)
          MOV.L       atan_f1,R2       ; R2 = MTH_FIXED(1.0)
          CMP/GT      R2,R4            ; if(degree <= MTH_FIXED(1.0))
          BF          atan_10          ;    goto atan_10
          MOV.L       atan_f1,R4       ; R4 : degree = MTH_FIXED(1.0)
atan_10:
	  MOV  	      R14,R0
	  SHLL16      R0               ; R0 = MTH_IntToFixed(mid)

          CMP/PZ      R12              ; R4 : degree + = R0
          BT/S        atan_11          ; if(y >= MTH_FIXED(0))
          ADD         R0,R4            ;    goto atan_11
          NEG         R4,R4            ; R4 : degree = -degree
atan_11:
          CMP/PZ      R10              ; if(x >= MTH_FIXED(0))
          BT          atan_14          ;    goto atan_14
          CMP/PZ      R12              ; if(y < MTH_FIXED(0))
          BF          atan_12          ;    goto atan_12
          MOV.L       atan_f180,R2     ; R2 = MTH_FIXED(180.0)  
          BRA         atan_13          ; goto atan_13
          NOP
atan_12:
          MOV.L       atan_fm180,R2    ; R2 = MTH_FIXED(-180.0) 
atan_13:
          SUB         R4,R2
          MOV         R2,R4            ; R4 = R2 - degree
atan_14:
          MOV         R4,R0            ; R0 = R4
          LDS.L       @R15+,PR
 	  LDS.L	      @R15+,MACL
 	  LDS.L	      @R15+,MACH
          MOV.L       @R15+,R9
          MOV.L       @R15+,R10
          MOV.L       @R15+,R11
          MOV.L       @R15+,R12
          MOV.L       @R15+,R13
          RTS                          ; return R0
          MOV.L       @R15+,R14
;
	.ALIGN	4
A_DIV:
	  .DATA.L     H'FFFFFF00
rTanTbl:
          .DATA.L     tanTbl
atan_fmax:
          .DATA.L     H'7FFF0000
atan_f1:
          .DATA.L     H'00010000
atan_f180:
          .DATA.L     H'00B40000
atan_fm180:
          .DATA.L     H'FF4C0000
tanTbl:                            ; static: tanTbl
          .DATA.L     H'00000000,H'00394A3A,    ;/*   0 */
+                     H'00000477,H'0039414B,    ;/*   1 */
+                     H'000008F0,H'00392F70,    ;/*   2 */
+                     H'00000D6A,H'003914AD,    ;/*   3 */
+                     H'000011E6,H'0038F10C,    ;/*   4 */
+                     H'00001665,H'0038C498,    ;/*   5 */
+                     H'00001AE8,H'00388F5F,    ;/*   6 */
+                     H'00001F6E,H'00385170,    ;/*   7 */
+                     H'000023FA,H'00380AE0,    ;/*   8 */
+                     H'0000288B,H'0037BBC4,    ;/*   9 */
+                     H'00002D23,H'00376435,    ;/*  10 */
+                     H'000031C2,H'0037044F,    ;/*  11 */
+                     H'0000366A,H'00369C2F,    ;/*  12 */
+                     H'00003B1A,H'00362BF6,    ;/*  13 */
+                     H'00003FD3,H'0035B3C7,    ;/*  14 */
+                     H'00004498,H'003533C7,    ;/*  15 */
+                     H'00004968,H'0034AC1E,    ;/*  16 */
+                     H'00004E44,H'00341CF7,    ;/*  17 */
+                     H'0000532D,H'0033867E,    ;/*  18 */
+                     H'00005825,H'0032E8E2,    ;/*  19 */
+                     H'00005D2D,H'00324454,    ;/*  20 */
+                     H'00006244,H'00319908,    ;/*  21 */
+                     H'0000676E,H'0030E733,    ;/*  22 */
+                     H'00006CAA,H'00302F0C,    ;/*  23 */
+                     H'000071FA,H'002F70CD,    ;/*  24 */
+                     H'0000775F,H'002EACB2,    ;/*  25 */
+                     H'00007CDC,H'002DE2F7,    ;/*  26 */
+                     H'00008270,H'002D13DB,    ;/*  27 */
+                     H'0000881E,H'002C3F9F,    ;/*  28 */
+                     H'00008DE7,H'002B6686,    ;/*  29 */
+                     H'000093CD,H'002A88D2,    ;/*  30 */
+                     H'000099D2,H'0029A6C9,    ;/*  31 */
+                     H'00009FF7,H'0028C0B2,    ;/*  32 */
+                     H'0000A63F,H'0027D6D3,    ;/*  33 */
+                     H'0000ACAC,H'0026E978,    ;/*  34 */
+                     H'0000B340,H'0025F8E8,    ;/*  35 */
+                     H'0000B9FE,H'0025056F,    ;/*  36 */
+                     H'0000C0E8,H'00240F5A,    ;/*  37 */
+                     H'0000C802,H'002316F5,    ;/*  38 */
+                     H'0000CF4E,H'00221C8D,    ;/*  39 */
+                     H'0000D6CF,H'00212071,    ;/*  40 */
+                     H'0000DE89,H'002022EE,    ;/*  41 */
+                     H'0000E680,H'001F2455,    ;/*  42 */
+                     H'0000EEB9,H'001E24F5,    ;/*  43 */
+                     H'0000F737,H'001D251D,    ;/*  44 */
+                     H'00010000,H'001C251D,    ;/*  45 */
+                     H'00010918,H'001B2545,    ;/*  46 */
+                     H'00011286,H'001A25E5,    ;/*  47 */
+                     H'00011C51,H'0019274C,    ;/*  48 */
+                     H'0001267E,H'001829C9,    ;/*  49 */
+                     H'00013116,H'00172DAD,    ;/*  50 */
+                     H'00013C22,H'00163345,    ;/*  51 */
+                     H'000147AA,H'00153AE0,    ;/*  52 */
+                     H'000153B9,H'001444CB,    ;/*  53 */
+                     H'0001605A,H'00135152,    ;/*  54 */
+                     H'00016D9B,H'001260C2,    ;/*  55 */
+                     H'00017B89,H'00117366,    ;/*  56 */
+                     H'00018A34,H'00108988,    ;/*  57 */
+                     H'000199AF,H'000FA371,    ;/*  58 */
+                     H'0001AA0E,H'000EC168,    ;/*  59 */
+                     H'0001BB67,H'000DE3B4,    ;/*  60 */
+                     H'0001CDD6,H'000D0A9B,    ;/*  61 */
+                     H'0001E177,H'000C365F,    ;/*  62 */
+                     H'0001F66D,H'000B6743,    ;/*  63 */
+                     H'00020CE0,H'000A9D88,    ;/*  64 */
+                     H'000224FE,H'0009D96D,    ;/*  65 */
+                     H'00023EFC,H'00091B2E,    ;/*  66 */
+                     H'00025B19,H'00086307,    ;/*  67 */
+                     H'0002799F,H'0007B132,    ;/*  68 */
+                     H'00029AE7,H'000705E6,    ;/*  69 */
+                     H'0002BF5A,H'00066158,    ;/*  70 */
+                     H'0002E77A,H'0005C3BC,    ;/*  71 */
+                     H'000313E3,H'00052D43,    ;/*  72 */
+                     H'00034556,H'00049E1C,    ;/*  73 */
+                     H'00037CC7,H'00041673,    ;/*  74 */
+                     H'0003BB67,H'00039673,    ;/*  75 */
+                     H'000402C2,H'00031E44,    ;/*  76 */
+                     H'000454DB,H'0002AE0B,    ;/*  77 */
+                     H'0004B462,H'000245EB,    ;/*  78 */
+                     H'00052501,H'0001E605,    ;/*  79 */
+                     H'0005ABD9,H'00018E76,    ;/*  80 */
+                     H'00065052,H'00013F5A,    ;/*  81 */
+                     H'00071D88,H'0000F8CA,    ;/*  82 */
+                     H'000824F3,H'0000BADB,    ;/*  83 */
+                     H'000983AD,H'000085A2,    ;/*  84 */
+                     H'000B6E17,H'0000592D,    ;/*  85 */
+                     H'000E4CF8,H'0000358D,    ;/*  86 */
+                     H'001314C5,H'00001ACA,    ;/*  87 */
+                     H'001CA2E1,H'000008EF,    ;/*  88 */
+                     H'00394A3A,H'00000105,    ;/*  89 */
+                     H'7FFFFFFF,H'00000000     ;/*  90 */
          .END
