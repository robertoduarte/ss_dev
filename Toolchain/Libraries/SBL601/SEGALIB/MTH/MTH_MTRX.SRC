;----------------------------------------------------------------------------
;  mth_mtrx.c -- MTH ���C�u���� �}�g���b�N�X���Z���� ���W���[��
;  Copyright(c) 1994 SEGA
;  Written by H.E on 1994-03-28 Ver.0.80
;  Updated by H.E on 1994-03-28 Ver.0.80
;
;  ���̃��C�u�����̓}�g���b�N�X���Z�������W���[���ŁA
;  �ȉ��̃��[�`�����܂ށB
;
;  MTH_InitialMatrix       -  �}�g���b�N�X�X�^�b�N�̏�����
;  MTH_ClearMatrix         -  �J�����g�}�g���b�N�X�̃N���A
;  MTH_PushMatrix          -  �}�g���b�N�X�̃v�b�V��
;  MTH_PopMatrix           -  �}�g���b�N�X�̃|�b�v
;  MTH_MoveMatrix          -  �}�g���b�N�X�����E���s�ړ�
;  MTH_RotateMatrixX       -  �}�g���b�N�X�����E�w����]
;  MTH_RotateMatrixY       -  �}�g���b�N�X�����E�x����]
;  MTH_RotateMatrixZ       -  �}�g���b�N�X�����E�y����]
;  MTH_ReverseZ            -  �}�g���b�N�X�����E�y���������]
;  MTH_MulMatrix           -  �}�g���b�N�X��Z
;  MTH_CoordTrans          -  �}�g���b�N�X���Z�E���_�̍��W�ϊ�
;  MTH_NormalTrans         -  �}�g���b�N�X���Z�E�@���x�N�g���̍��W�ϊ�
;
;----------------------------------------------------------------------------
;
          .IMPORT     _MTH_Sin
          .IMPORT     _MTH_Cos
          .IMPORT     _MTH_Mul
          .EXPORT     _MTH_InitialMatrix
          .EXPORT     _MTH_ClearMatrix
          .EXPORT     _MTH_PushMatrix
          .EXPORT     _MTH_PopMatrix
          .EXPORT     _MTH_MoveMatrix
          .EXPORT     _MTH_RotateMatrixX
          .EXPORT     _MTH_RotateMatrixY
          .EXPORT     _MTH_RotateMatrixZ
          .EXPORT     _MTH_ReverseZ
          .EXPORT     _MTH_MulMatrix
          .EXPORT     _MTH_CoordTrans
          .EXPORT     _MTH_NormalTrans
          .SECTION    SEGA_P,CODE,ALIGN=4
;
;
;*****************************************************************************
;*
;* NAME:  MTH_InitialMatrix()  - Initial Matrix Stack
;*
;*     void MTH_InitialMatrix(MthMatrixTbl *matrixTbl, Uint16 stackSize,
;*						     MthMtrix *matrix)
;*
;* PARAMETERS :
;*
;* �@�@(1) MthMatrixTbl *matrixTbl - <o> �}�g���b�N�X�e�[�u��
;* �@�@(2) Uint16       stackSize  - <i> �}�g���b�N�X�X�^�b�N�̍ő�G���g����
;* �@�@(3) MthMatrix    *matrix    - <i> �}�g���b�N�X�X�^�b�N�G���A
;*
;* DESCRIPTION:
;*
;*     �}�g���b�N�X�X�^�b�N�e�[�u���̏�����
;*
;* POSTCONDITIONS:
;*
;*     No exist.
;*
;* CAVEATS:
;*
;*****************************************************************************
;
_MTH_InitialMatrix:             ; function: MTH_InitialMatrix
          STS.L       PR,@-R15
          MOV.W       R5,@R4
          MOV.L       R6,@(8,R4)
          MOV.L       R6,@(4,R4)
          BRA         _MTH_ClearMatrix
          LDS.L       @R15+,PR
;
;
;*****************************************************************************
;*
;* NAME:  MTH_ClearMatrix()  - clear current matrix to unit matrix
;*
;*     void MTH_ClearMatrix(MthMatrixTbl *matrixTbl)
;*
;* PARAMETERS :
;*
;* �@�@(1) MthMatrixTbl *matrixTbl - <i> �}�g���b�N�X�e�[�u��
;*
;* DESCRIPTION:
;*
;*     �}�g���b�N�X�X�^�b�N���̃J�����g�}�g���b�N�X��P�ʍs��ɃN���A����B
;*
;* POSTCONDITIONS:
;*
;*     No exist.
;*
;* CAVEATS:
;*
;*****************************************************************************
;
_MTH_ClearMatrix:               ; function: MTH_ClearMatrix
          MOV.L       cm_unitMatrix,R6
          MOV.L       @(4,R4),R5
          MOV         #12,R0
cm_0:
	  MOV.L         @R6+,R1
          MOV.L         R1,@R5
          DT          R0
          BF/S        cm_0
          ADD         #4,R5
          RTS
          NOP
;
	  .ALIGN      4
cm_unitMatrix:                             
          .DATA.L     unitMatrix
;
;
;*************************************************************************
;*
;* NAME : MTH_PushMatrix    - push current matrix to matrix stack
;*
;*     void MTH_PushMatrix(MthMatrixTbl *matrixTbl)
;*
;* PARAMETERS
;*
;* �@�@(1) MthMatrixTbl *matrixTbl - <i> �}�g���b�N�X�e�[�u��
;*
;* DESCRIPTION
;*
;*	�J�����g�}�g���b�N�X�̃v�b�V������
;*
;* POSTCONDITIONS
;*
;* CAVEATS
;*
;*************************************************************************
;
_MTH_PushMatrix:                ; function: MTH_PushMatrix
          MOV.L       @(4,R4),R6
          MOV.L       @(4,R4),R5
          ADD         #48,R5
          MOV         R5,R2
          MOV         #12,R0
pm_0:
	  MOV.L         @R6+,R1
          MOV.L		R1,@R5
          DT          R0
          BF/S        pm_0
          ADD         #4,R5
          RTS
          MOV.L       R2,@(4,R4)
;
;
;*************************************************************************
;*
;* NAME : MTH_PopMatrix    - pop current matrix from matrix stack
;*
;*     void MTH_PopMatrix(MthMatrixTbl *matrixTbl)
;*
;* PARAMETERS
;*
;* �@�@(1) MthMatrixTbl *matrixTbl - <i> �}�g���b�N�X�e�[�u��
;*
;* DESCRIPTION
;*
;*	�J�����g�}�g���b�N�X�̃|�b�v����
;*
;* POSTCONDITIONS
;*
;* CAVEATS
;*
;*************************************************************************
;
_MTH_PopMatrix:                 ; function: MTH_PopMatrix
          MOV.L       @(4,R4),R3
          ADD         #-48,R3
          RTS
          MOV.L       R3,@(4,R4)
;
;
;*************************************************************************
;*
;* NAME : MTH_MoveMatrix   - Move Matrix
;*
;*     void MTH_MoveMatrix(MthMatrixTbl *matrixTbl,
;*                                       Fixed32 x, Fixed32 y, Fixed32 z)
;*
;* PARAMETERS
;*
;* �@�@(1) MthMatrixTbl *matrixTbl - <i> �}�g���b�N�X�e�[�u��
;* �@�@(2) Fixed32      x          - <i> �w�����̈ړ���
;* �@�@(3) Fixed32      y          - <i> �x�����̈ړ���
;* �@�@(4) Fixed32      z          - <i> �y�����̈ړ���
;*
;* DESCRIPTION
;*
;* �J�����g�}�g���b�N�X�ɑ΂��w�x�y���s�ړ��̃}�g���b�N�X�������s��
;*
;* | M00 M01 M02 M03 | | 1 0 0 x |   | M00 M01 M02 M00*x+M01*y+M02*z+M03 |
;* | M10 M11 M12 M13 |.| 0 1 0 y | = | M10 M11 M12 M10*x+M11*y+M12*z+M13 |
;* | M20 M21 M22 M23 | | 0 0 1 z |   | M20 M21 M22 M20*x+M21*y+M22*z+M23 |
;* |   0   0   0   1 | | 0 0 0 1 |   |   0   0   0                     1 |
;*
;* POSTCONDITIONS
;*
;* CAVEATS
;*
;*************************************************************************
;
_MTH_MoveMatrix:                ; function: MTH_MoveMatrix
          MOV.L       @(4,R4),R3 ; R3 = currentMatrix
          MOV.L       R7,@-R15   ; z
          MOV.L       R6,@-R15   ; y
          MOV.L       R5,@-R15   ; x
          STS       MACH,R6
          STS       MACL,R7
;
          MOV         R15,R4     ; R4 = (x, y, z)
          CLRMAC
          MAC.L       @R3+,@R4+
          MAC.L       @R3+,@R4+
          MAC.L       @R3+,@R4+
  	  STS	      MACH,R1
	  STS	      MACL,R0
	  XTRCT	      R1,R0      ; R0 = M00*x+M01*y+M02*z
          MOV         R3,R2
          MOV.L       @R3+,R1
          ADD         R0,R1      ; R1 = R0 + M03
          MOV.L       R1,@R2     ; currentMatrix[0][3] = R1
;
          MOV         R15,R4     ; @R4 = (x, y, z)
          CLRMAC
          MAC.L       @R3+,@R4+
          MAC.L       @R3+,@R4+
          MAC.L       @R3+,@R4+
  	  STS	      MACH,R1
	  STS	      MACL,R0
	  XTRCT	      R1,R0      ; R0 = M10*x+M11*y+M12*z
          MOV         R3,R2
          MOV.L       @R3+,R1
          ADD         R0,R1      ; R1 = R0 + M03
          MOV.L       R1,@R2     ; currentMatrix[1][3] = R1
;
          MOV         R15,R4     ; R4 = (x, y, z)
          CLRMAC
          MAC.L       @R3+,@R4+
          MAC.L       @R3+,@R4+
          MAC.L       @R3+,@R4+
  	  STS	      MACH,R1
	  STS	      MACL,R0
	  XTRCT	      R1,R0      ; R0 = M20*x+M21*y+M22*z
          MOV.L       @R3,R1
          ADD         R0,R1      ; R1 = R0 + M03
	  ADD         #12,R15
          LDS       R6,MACH
          LDS		R7,MACL
          RTS
          MOV.L       R1,@R3     ; currentMatrix[2][3] = R1
;
;
;*************************************************************************
;*
;* NAME : MTH_RotateMatrixX  - Rotate Matrix X
;*
;*     void    MTH_RotateMatrixX(MthMatrixTbl *matrixTbl, Fixed32 xDegree)
;*
;* PARAMETERS
;*
;* �@�@(1) MthMatrixTbl *matrixTbl - <i> �}�g���b�N�X�e�[�u��
;* �@�@(2) Fixed32      xDegree    - <i> �w���̉�]�p�x�i-180����180�͈̔́j
;*
;* DESCRIPTION
;*
;* �J�����g�}�g���b�N�X�ɑ΂��w����]�̃}�g���b�N�X�������s��
;*
;* | M00 M01 M02 M03 | | 1    0    0 0 |
;* | M10 M11 M12 M13 |.| 0  cos -sin 0 |
;* | M20 M21 M22 M23 | | 0  sin  cos 0 |
;* |   0   0   0   1 | | 0    0    0 1 |
;*
;*		         | M00 M01*cos+M02*sin -M01*sin+M02*cos M03 |
;*		       = | M10 M11*cos+M12*sin -M11*sin+M12*cos M13 |
;*		         | M20 M21*cos+M22*sin -M21*sin+M22*cos M23 |
;*		         |   0               0                0   1 |
;*
;* POSTCONDITIONS
;*
;* CAVEATS
;* 
;*************************************************************************
;
_MTH_RotateMatrixX:             ; function: MTH_RotateMatrixX
          MOV.L       R8,@-R15
          MOV.L       R9,@-R15
          MOV.L       R10,@-R15
          STS.L       PR,@-R15
          STS.L       MACL,@-R15
          STS.L       MACH,@-R15
          MOV         R4,R8
          MOV         R5,R9
;
          MOV.L       rmx_MTH_Sin,R3
          JSR         @R3
          MOV         R9,R4
          MOV         R0,R10     ; R10 = sin
;
          MOV.L       rmx_MTH_Cos,R3
          JSR         @R3
          MOV         R9,R4      ; R0  = cos
;
          MOV.L       @(4,R8),R6 ; R6 = currentMatrix
          MOV.L       R0,@-R15   ; Push   cos
          NEG         R10,R1
          MOV.L       R1,@-R15   ; Push  -sin
          MOV         R15,R8     ; @R8 = (-sin,cos)
          MOV.L       R10,@-R15  ; Push   sin
          MOV.L       R0,@-R15   ; Push   cos
          MOV         R15,R7     ; @R7 = (cos,sin)
;
          MOV.L       @(8,R6),R0
          MOV.L       R0,@-R15   ; Push  M02
          MOV.L       @(4,R6),R0
          MOV.L       R0,@-R15   ; Push  M01
          MOV         R15,R9     ; @R9 = (M01,M02)
          MOV         R7,R4
          MOV         R9,R3
          CLRMAC
          MAC.L       @R3+,@R4+
          MAC.L       @R3+,@R4+
  	  STS	      MACH,R1
	  STS	      MACL,R0
	  XTRCT	      R1,R0      ; R0 = M01*cos+M02*sin
          MOV.L       R0,@(4,R6) ; M01 = R0
          MOV         R8,R4
          CLRMAC
          MAC.L       @R9+,@R4+
          MAC.L       @R9+,@R4+
  	  STS	      MACH,R1
	  STS	      MACL,R0
	  XTRCT	      R1,R0      ; R0 = -M01*sin+M02*cos
          MOV.L       R0,@(8,R6) ; M02 = R0
	  ADD         #8,R15
;
          MOV.L       @(24,R6),R0
          MOV.L       R0,@-R15   ; Push  M12
          MOV.L       @(20,R6),R0
          MOV.L       R0,@-R15   ; Push  M11
          MOV         R15,R9     ; @R9 = (M11,M12)
          MOV         R7,R4
          MOV         R9,R3
          CLRMAC
          MAC.L       @R3+,@R4+
          MAC.L       @R3+,@R4+
  	  STS	      MACH,R1
	  STS	      MACL,R0
	  XTRCT	      R1,R0       ; R0 = M11*cos+M12*sin
          MOV.L       R0,@(20,R6) ; M11 = R0
          MOV         R8,R4
          CLRMAC
          MAC.L       @R9+,@R4+
          MAC.L       @R9+,@R4+
  	  STS	      MACH,R1
	  STS	      MACL,R0
	  XTRCT	      R1,R0       ; R0 = -M11*sin+M12*cos
          MOV.L       R0,@(24,R6) ; M12 = R0
	  ADD         #8,R15
;
          MOV.L       @(40,R6),R0
          MOV.L       R0,@-R15   ; Push  M22
          MOV.L       @(36,R6),R0
          MOV.L       R0,@-R15   ; Push  M21
          MOV         R15,R9     ; @R9 = (M21,M22)
          MOV         R7,R4
          MOV         R9,R3
          CLRMAC
          MAC.L       @R3+,@R4+
          MAC.L       @R3+,@R4+
  	  STS	      MACH,R1
	  STS	      MACL,R0
	  XTRCT	      R1,R0       ; R0 = M21*cos+M22*sin
          MOV.L       R0,@(36,R6) ; M21 = R0
          MOV         R8,R4
          CLRMAC
          MAC.L       @R9+,@R4+
          MAC.L       @R9+,@R4+
  	  STS	      MACH,R1
	  STS	      MACL,R0
	  XTRCT	      R1,R0       ; R0 = -M21*sin+M22*cos
          MOV.L       R0,@(40,R6) ; M22 = R0
	  ADD         #24,R15
;
          LDS.L       @R15+,MACH
          LDS.L       @R15+,MACL
          LDS.L       @R15+,PR
          MOV.L       @R15+,R10
          MOV.L       @R15+,R9
          RTS
          MOV.L       @R15+,R8
;
	  .ALIGN      4
rmx_MTH_Sin:                             
          .DATA.L     _MTH_Sin
rmx_MTH_Cos:                             
          .DATA.L     _MTH_Cos
;
;
;*************************************************************************
;*
;* NAME : MTH_RotateMatrixY  - Rotate Matrix Y
;*
;*     void    MTH_RotateMatrixY(MthMatrixTbl *matrixTbl, Fixed32 yDegree)
;*
;* PARAMETERS
;*
;* �@�@(1) MthMatrixTbl *matrixTbl - <i> �}�g���b�N�X�e�[�u��
;* �@�@(2) Fixed32      yDegree    - <i> �x���̉�]�p�x�i-180����180�͈̔́j
;*
;* DESCRIPTION
;*
;* �J�����g�}�g���b�N�X�ɑ΂��x����]�̃}�g���b�N�X�������s��
;*
;* | M00 M01 M02 M03 | |  cos 0  sin 0 |
;* | M10 M11 M12 M13 |.|    0 1    0 0 |
;* | M20 M21 M22 M23 | | -sin 0  cos 0 |
;* |   0   0   0   1 | |    0 0    0 1 |
;*
;*			|  M00*cos-M02*sin  M01 M00*sin+M02*cos M03 |
;*		    =	|  M10*cos-M12*sin  M11 M10*sin+M12*cos M13 |
;*			|  M20*cos-M22*sin  M21 M20*sin+M22*cos M23 |
;*			|                0    0               0   1 |
;*
;* POSTCONDITIONS
;*
;* CAVEATS
;*
;*************************************************************************
;
_MTH_RotateMatrixY:             ; function: MTH_RotateMatrixY
          MOV.L       R8,@-R15
          MOV.L       R9,@-R15
          MOV.L       R10,@-R15
          STS.L       PR,@-R15
          STS.L       MACL,@-R15
          STS.L       MACH,@-R15
          MOV         R4,R8
          MOV         R5,R9
;
          MOV.L       rmy_MTH_Sin,R3
          JSR         @R3
          MOV         R9,R4
          MOV         R0,R10     ; R10 = sin
;
          MOV.L       rmy_MTH_Cos,R3
          JSR         @R3
          MOV         R9,R4      ; R0  = cos
;
          MOV.L       @(4,R8),R6 ; R6 = currentMatrix
          MOV.L       R0,@-R15   ; Push   cos
          MOV.L       R10,@-R15  ; Push   sin
          MOV         R15,R8     ; @R8 = (sin,cos)
          NEG         R10,R1
          MOV.L       R1,@-R15   ; Push  -sin
          MOV.L       R0,@-R15   ; Push   cos
          MOV         R15,R7     ; @R7 = (cos,-sin)
;
          MOV.L       @(8,R6),R0
          MOV.L       R0,@-R15   ; Push  M02
          MOV.L       @(0,R6),R0
          MOV.L       R0,@-R15   ; Push  M00
          MOV         R15,R9     ; @R9 = (M00,M02)
          MOV         R7,R4
          MOV         R9,R3
          CLRMAC
          MAC.L       @R3+,@R4+
          MAC.L       @R3+,@R4+
  	  STS	      MACH,R1
	  STS	      MACL,R0
	  XTRCT	      R1,R0      ; R0 = M00*cos-M02*sin
          MOV.L       R0,@(0,R6) ; M00 = R0
          MOV         R8,R4
          CLRMAC
          MAC.L       @R9+,@R4+
          MAC.L       @R9+,@R4+
  	  STS	      MACH,R1
	  STS	      MACL,R0
	  XTRCT	      R1,R0      ; R0 = M00*sin+M02*cos
          MOV.L       R0,@(8,R6) ; M02 = R0
	  ADD         #8,R15
;
          MOV.L       @(24,R6),R0
          MOV.L       R0,@-R15   ; Push  M12
          MOV.L       @(16,R6),R0
          MOV.L       R0,@-R15   ; Push  M10
          MOV         R15,R9     ; @R9 = (M10,M12)
          MOV         R7,R4
          MOV         R9,R3
          CLRMAC
          MAC.L       @R3+,@R4+
          MAC.L       @R3+,@R4+
  	  STS	      MACH,R1
	  STS	      MACL,R0
	  XTRCT	      R1,R0       ; R0 = M10*cos-M12*sin
          MOV.L       R0,@(16,R6) ; M10 = R0
          MOV         R8,R4
          CLRMAC
          MAC.L       @R9+,@R4+
          MAC.L       @R9+,@R4+
  	  STS	      MACH,R1
	  STS	      MACL,R0
	  XTRCT	      R1,R0       ; R0 = M10*sin+M12*cos
          MOV.L       R0,@(24,R6) ; M12 = R0
	  ADD         #8,R15
;
          MOV.L       @(40,R6),R0
          MOV.L       R0,@-R15   ; Push  M22
          MOV.L       @(32,R6),R0
          MOV.L       R0,@-R15   ; Push  M20
          MOV         R15,R9     ; @R9 = (M20,M22)
          MOV         R7,R4
          MOV         R9,R3
          CLRMAC
          MAC.L       @R3+,@R4+
          MAC.L       @R3+,@R4+
  	  STS	      MACH,R1
	  STS	      MACL,R0
	  XTRCT	      R1,R0       ; R0 = M20*cos-M22*sin
          MOV.L       R0,@(32,R6) ; M20 = R0
          MOV         R8,R4
          CLRMAC
          MAC.L       @R9+,@R4+
          MAC.L       @R9+,@R4+
  	  STS	      MACH,R1
	  STS	      MACL,R0
	  XTRCT	      R1,R0       ; R0 = M20*sin+M22*cos
          MOV.L       R0,@(40,R6) ; M22 = R0
	  ADD         #24,R15
;
          LDS.L       @R15+,MACH
          LDS.L       @R15+,MACL
          LDS.L       @R15+,PR
          MOV.L       @R15+,R10
          MOV.L       @R15+,R9
          RTS
          MOV.L       @R15+,R8
;
	  .ALIGN      4
rmy_MTH_Sin:                             
          .DATA.L     _MTH_Sin
rmy_MTH_Cos:                             
          .DATA.L     _MTH_Cos
;
;
;*************************************************************************
;*
;* NAME : MTH_RotateMatrixZ  - Rotate Matrix Z
;*
;*     void MTH_RotateMatrixZ(MthMatrixTbl *matrixTbl, Fixed32 zDegree)
;*
;* PARAMETERS
;*
;* �@�@(1) MthMatrixTbl *matrixTbl - <i> �}�g���b�N�X�e�[�u��
;* �@�@(2) Fixed32      zDegree    - <i> �y���̉�]�p�x�i-180����180�͈̔́j
;*
;* DESCRIPTION
;*
;* | M00 M01 M02 M03 | | cos -sin  0 0 |
;* | M10 M11 M12 M13 |.| sin  cos  0 0 |
;* | M20 M21 M22 M23 | |   0    0  1 0 |
;* |   0   0   0   1 | |   0    0  0 1 |
;*
;*				| M00*cos+M01*sin -M00*sin+M01*cos M02 M03 |
;*			      =	| M10*cos+M11*sin -M10*sin+M11*cos M12 M13 |
;*				| M20*cos+M21*sin -M20*sin+M21*cos M22 M23 |
;*				|               0                0   0   1 |
;*
;* POSTCONDITIONS
;* 
;* CAVEATS
;* 
;*************************************************************************
;
_MTH_RotateMatrixZ:             ; function: MTH_RotateMatrixZ
                                ; frame size=76
          MOV.L       R8,@-R15
          MOV.L       R9,@-R15
          MOV.L       R10,@-R15
          STS.L       PR,@-R15
          STS.L       MACL,@-R15
          STS.L       MACH,@-R15
          MOV         R4,R8
          MOV         R5,R9
;
          MOV.L       rmz_MTH_Sin,R3
          JSR         @R3
          MOV         R9,R4
          MOV         R0,R10     ; R10 = sin
;
          MOV.L       rmz_MTH_Cos,R3
          JSR         @R3
          MOV         R9,R4      ; R0  = cos
;
          MOV.L       @(4,R8),R6 ; R6 = currentMatrix
          MOV.L       R0,@-R15   ; Push   cos
          NEG         R10,R1
          MOV.L       R1,@-R15   ; Push  -sin
          MOV         R15,R8     ; @R8 = (-sin,cos)
          MOV.L       R10,@-R15  ; Push   sin
          MOV.L       R0,@-R15   ; Push   cos
          MOV         R15,R7     ; @R7 = (cos,sin)
;
          MOV.L       @(4,R6),R0
          MOV.L       R0,@-R15   ; Push  M01
          MOV.L       @(0,R6),R0
          MOV.L       R0,@-R15   ; Push  M00
          MOV         R15,R9     ; @R9 = (M00,M01)
          MOV         R7,R4
          MOV         R9,R3
          CLRMAC
          MAC.L       @R3+,@R4+
          MAC.L       @R3+,@R4+
  	  STS	      MACH,R1
	  STS	      MACL,R0
	  XTRCT	      R1,R0      ; R0 = M00*cos+M01*sin
          MOV.L       R0,@(0,R6) ; M00 = R0
          MOV         R8,R4
          CLRMAC
          MAC.L       @R9+,@R4+
          MAC.L       @R9+,@R4+
  	  STS	      MACH,R1
	  STS	      MACL,R0
	  XTRCT	      R1,R0      ; R0 = -M00*sin+M01*cos
          MOV.L       R0,@(4,R6) ; M01 = R0
	  ADD         #8,R15
;
          MOV.L       @(20,R6),R0
          MOV.L       R0,@-R15   ; Push  M11
          MOV.L       @(16,R6),R0
          MOV.L       R0,@-R15   ; Push  M10
          MOV         R15,R9     ; @R9 = (M10,M11)
          MOV         R7,R4
          MOV         R9,R3
          CLRMAC
          MAC.L       @R3+,@R4+
          MAC.L       @R3+,@R4+
  	  STS	      MACH,R1
	  STS	      MACL,R0
	  XTRCT	      R1,R0       ; R0 = M10*cos+M11*sin
          MOV.L       R0,@(16,R6) ; M10 = R0
          MOV         R8,R4
          CLRMAC
          MAC.L       @R9+,@R4+
          MAC.L       @R9+,@R4+
  	  STS	      MACH,R1
	  STS	      MACL,R0
	  XTRCT	      R1,R0       ; R0 = -M10*sin+M11*cos
          MOV.L       R0,@(20,R6) ; M11 = R0
	  ADD         #8,R15
;
          MOV.L       @(36,R6),R0
          MOV.L       R0,@-R15   ; Push  M21
          MOV.L       @(32,R6),R0
          MOV.L       R0,@-R15   ; Push  M20
          MOV         R15,R9     ; @R9 = (M20,M21)
          MOV         R7,R4
          MOV         R9,R3
          CLRMAC
          MAC.L       @R3+,@R4+
          MAC.L       @R3+,@R4+
  	  STS	      MACH,R1
	  STS	      MACL,R0
	  XTRCT	      R1,R0       ; R0 = M20*cos+M21*sin
          MOV.L       R0,@(32,R6) ; M20 = R0
          MOV         R8,R4
          CLRMAC
          MAC.L       @R9+,@R4+
          MAC.L       @R9+,@R4+
  	  STS	      MACH,R1
	  STS	      MACL,R0
	  XTRCT	      R1,R0       ; R0 = -M20*sin+M21*cos
          MOV.L       R0,@(36,R6) ; M21 = R0
	  ADD         #24,R15
;
          LDS.L       @R15+,MACH
          LDS.L       @R15+,MACL
          LDS.L       @R15+,PR
          MOV.L       @R15+,R10
          MOV.L       @R15+,R9
          RTS
          MOV.L       @R15+,R8
;
	  .ALIGN      4
rmz_MTH_Sin:                             
          .DATA.L     _MTH_Sin
rmz_MTH_Cos:                             
          .DATA.L     _MTH_Cos
;
;
;*************************************************************************
;*
;* NAME : MTH_ReverseZ  - Revers Signe Z 
;*
;*     void    MTH_ReverseZ(MthMatrixTbl *matrixTbl)
;*
;* PARAMETERS
;*
;* �@�@(1) MthMatrixTbl *matrixTbl - <i> �}�g���b�N�X�e�[�u��
;*
;* DESCRIPTION
;*
;* �J�����g�}�g���b�N�X�ɑ΂��y���������]�̃}�g���b�N�X�������s��
;*
;* | M00 M01 M02 M03 | | 1 0  0 0 |
;* | M10 M11 M12 M13 |.| 0 1  0 0 |
;* | M20 M21 M22 M23 | | 0 0 -1 0 |
;* |   0   0   0   1 | | 0 0  0 1 |
;*
;*				| M00 M01 -M02 M03 |
;*			      =	| M10 M11 -M12 M13 |
;*				| M20 M21 -M22 M23 |
;*				|   0   0    0   1 |
;*
;* POSTCONDITIONS
;* 
;* CAVEATS
;* 
;*************************************************************************
;
_MTH_ReverseZ:                  ; function: MTH_ReverseZ
          MOV.L       @(4,R4),R6  ; R6 = currentMatrix
          MOV.L       @(8,R6),R0
          NEG         R0,R0
          MOV.L       R0,@(8,R6)  ; M02 = -M02
;
          MOV.L       @(24,R6),R0
          NEG         R0,R0
          MOV.L       R0,@(24,R6) ; M12 = -M12
;
          MOV.L       @(40,R6),R0
          NEG         R0,R0
          RTS
          MOV.L       R0,@(40,R6) ; M22 = -M22
;
;
;*************************************************************************
;*
;* NAME : MTH_MulMatrix  -  Multiple Matrix
;*
;*     void   MTH_MulMatrix(MthMatrix *a, MthMatrix *b, MthMatrix *c)
;*
;* PARAMETERS
;*
;* �@�@(1) MthMatrix  *a - <i> ���Z�}�g���b�N�X
;* �@�@(2) MthMatrix  *b - <i> ��Z�}�g���b�N�X
;* �@�@(3) MthMatrix  *c - <o> ��Z���ʃ}�g���b�N�X
;*
;* DESCRIPTION
;*
;* �}�g���b�N�X��Z����
;*
;* | a00 a01 a02 a03 | | b00 b01 b02 b03 |	| c00 c01 c02 c03 |
;* | a10 a11 a12 a13 |.| b10 b11 b12 b13 |  =	| c10 c11 c12 c13 |
;* | a20 a21 a22 a23 | | b20 b21 b22 b23 |	| c20 c21 c22 c23 |
;* |   0   0   0   1 | |   0   0   0   1 |	|   0   0   0   1 |
;*
;*    c00 = a00*b00+a01*b10+a02*b20
;*    c10 = a10*b00+a11*b10+a12*b20
;*    c20 = a20*b00+a21*b10+a22*b20
;*
;*    c01 = a00*b01+a01*b11+a02*b21 
;*    c11 = a10*b01+a11*b11+a12*b21 
;*    c21 = a20*b01+a21*b11+a22*b21 
;*
;*    c02 = a00*b02+a01*b12+a02*b22
;*    c12 = a10*b02+a11*b12+a12*b22
;*    c22 = a20*b02+a21*b12+a22*b22
;*
;*    c03 = a00*b03+a01*b13+a02*b23+a03
;*    c13 = a10*b03+a11*b13+a12*b23+a13
;*    c23 = a20*b03+a21*b13+a22*b23+a23
;*    
;*
;* POSTCONDITIONS
;* 
;* CAVEATS
;* 
;*************************************************************************
;
_MTH_MulMatrix:                 ; function: MTH_MulMatrix
          STS.L       MACH,@-R15
          STS.L       MACL,@-R15
;---------
          MOV.L       @(32,R5),R0
          MOV.L       R0,@-R15      ; Push b20
          MOV.L       @(16,R5),R0
          MOV.L       R0,@-R15      ; Push b10
          MOV.L       @(0,R5),R0
          MOV.L       R0,@-R15      ; Push b00
;
          MOV         R4,R2         ; R2 = a00
          MOV         R15,R3        ; R3 = (b00, b10, b20)
          CLRMAC
          MAC.L       @R2+,@R3+
          MAC.L       @R2+,@R3+
          MAC.L       @R2+,@R3+
  	  STS	      MACH,R1
	  STS	      MACL,R0
	  XTRCT	      R1,R0         ; R0  = a00*b00+a01*b10+a02*b20
          MOV.L       R0,@(0,R6)    ; c00 = R0
;
          ADD         #4,R2         ; R2  = a10
          MOV         R15,R3        ; R3 = (b00, b10, b20)
          CLRMAC
          MAC.L       @R2+,@R3+
          MAC.L       @R2+,@R3+
          MAC.L       @R2+,@R3+
  	  STS	      MACH,R1
	  STS	      MACL,R0
	  XTRCT	      R1,R0         ; R0  = a10*b00+a11*b10+a12*b20
          MOV.L       R0,@(16,R6)   ; c10 = R0
;
          ADD         #4,R2         ; R2  = a20
          MOV         R15,R3        ; R3 = (b00, b10, b20)
          CLRMAC
          MAC.L       @R2+,@R3+
          MAC.L       @R2+,@R3+
          MAC.L       @R2+,@R3+
  	  STS	      MACH,R1
	  STS	      MACL,R0
	  XTRCT	      R1,R0         ; R0  = a20*b00+a21*b10+a22*b20
          MOV.L       R0,@(32,R6)   ; c20 = R0
;---------
	  ADD         #12,R15
          MOV.L       @(36,R5),R0
          MOV.L       R0,@-R15      ; Push b21
          MOV.L       @(20,R5),R0
          MOV.L       R0,@-R15      ; Push b11
          MOV.L       @(4,R5),R0
          MOV.L       R0,@-R15      ; Push b01
;
          MOV         R4,R2         ; R2 = a00
          MOV         R15,R3        ; R3 = (b01, b11, b21)
          CLRMAC
          MAC.L       @R2+,@R3+
          MAC.L       @R2+,@R3+
          MAC.L       @R2+,@R3+
  	  STS	      MACH,R1
	  STS	      MACL,R0
	  XTRCT	      R1,R0         ; R0  = a00*b01+a01*b11+a02*b21
          MOV.L       R0,@(4,R6)    ; c01 = R0
;
          ADD         #4,R2         ; R2  = a10
          MOV         R15,R3        ; R3 = (b01, b11, b21)
          CLRMAC
          MAC.L       @R2+,@R3+
          MAC.L       @R2+,@R3+
          MAC.L       @R2+,@R3+
  	  STS	      MACH,R1
	  STS	      MACL,R0
	  XTRCT	      R1,R0         ; R0  = a10*b01+a11*b11+a12*b21
          MOV.L       R0,@(20,R6)   ; c11 = R0
;
          ADD         #4,R2         ; R2  = a20
          MOV         R15,R3        ; R3 = (b01, b11, b21)
          CLRMAC
          MAC.L       @R2+,@R3+
          MAC.L       @R2+,@R3+
          MAC.L       @R2+,@R3+
  	  STS	      MACH,R1
	  STS	      MACL,R0
	  XTRCT	      R1,R0         ; R0  = a20*b01+a21*b11+a22*b21
          MOV.L       R0,@(36,R6)   ; c21 = R0
;---------
	  ADD         #12,R15
          MOV.L       @(40,R5),R0
          MOV.L       R0,@-R15      ; Push b22
          MOV.L       @(24,R5),R0
          MOV.L       R0,@-R15      ; Push b12
          MOV.L       @(8,R5),R0
          MOV.L       R0,@-R15      ; Push b02
;
          MOV         R4,R2         ; R2 = a00
          MOV         R15,R3        ; R3 = (b02, b12, b22)
          CLRMAC
          MAC.L       @R2+,@R3+
          MAC.L       @R2+,@R3+
          MAC.L       @R2+,@R3+
  	  STS	      MACH,R1
	  STS	      MACL,R0
	  XTRCT	      R1,R0         ; R0  = a00*b02+a01*b12+a02*b22
          MOV.L       R0,@(8,R6)    ; c02 = R0
;
          ADD         #4,R2         ; R2  = a10
          MOV         R15,R3        ; R3 = (b02, b12, b22)
          CLRMAC
          MAC.L       @R2+,@R3+
          MAC.L       @R2+,@R3+
          MAC.L       @R2+,@R3+
  	  STS	      MACH,R1
	  STS	      MACL,R0
	  XTRCT	      R1,R0         ; R0  = a10*b02+a11*b12+a12*b22
          MOV.L       R0,@(24,R6)   ; c12 = R0
;
          ADD         #4,R2         ; R2  = a20
          MOV         R15,R3        ; R3 = (b02, b12, b22)
          CLRMAC
          MAC.L       @R2+,@R3+
          MAC.L       @R2+,@R3+
          MAC.L       @R2+,@R3+
  	  STS	      MACH,R1
	  STS	      MACL,R0
	  XTRCT	      R1,R0         ; R0  = a20*b02+a21*b12+a22*b22
          MOV.L       R0,@(40,R6)   ; c22 = R0
;---------
	  ADD         #12,R15
	  MOV         #1,R0
	  SHLL16      R0
          MOV.L       R0,@-R15      ; Push 1.0
          MOV.L       @(44,R5),R0
          MOV.L       R0,@-R15      ; Push b23
          MOV.L       @(28,R5),R0
          MOV.L       R0,@-R15      ; Push b13
          MOV.L       @(12,R5),R0
          MOV.L       R0,@-R15      ; Push b03
;
          MOV         R4,R2         ; R2 = a00
          MOV         R15,R3        ; R3 = (b03, b13, b23, 1.0)
          CLRMAC
          MAC.L       @R2+,@R3+
          MAC.L       @R2+,@R3+
          MAC.L       @R2+,@R3+
          MAC.L       @R2+,@R3+
  	  STS	      MACH,R1
	  STS	      MACL,R0
	  XTRCT	      R1,R0         ; R0  = a00*b03+a01*b13+a02*b23+a03
          MOV.L       R0,@(12,R6)   ; c03 = R0
;
          MOV         R15,R3        ; R3 = (b03, b13, b23, 1.0)
          CLRMAC
          MAC.L       @R2+,@R3+
          MAC.L       @R2+,@R3+
          MAC.L       @R2+,@R3+
          MAC.L       @R2+,@R3+
  	  STS	      MACH,R1
	  STS	      MACL,R0
	  XTRCT	      R1,R0         ; R0  = a10*b03+a11*b13+a12*b23+a13
          MOV.L       R0,@(28,R6)   ; c13 = R0
;
          MOV         R15,R3        ; R3 = (b03, b13, b23, 1.0)
          CLRMAC
          MAC.L       @R2+,@R3+
          MAC.L       @R2+,@R3+
          MAC.L       @R2+,@R3+
          MAC.L       @R2+,@R3+
  	  STS	      MACH,R1
	  STS	      MACL,R0
	  XTRCT	      R1,R0         ; R0  = a20*b03+a21*b13+a22*b23+a23
;
	  ADD         #16,R15
          LDS.L       @R15+,MACL
          LDS.L       @R15+,MACH
          RTS
          MOV.L       R0,@(44,R6)   ; c23 = R0
;
;
;*************************************************************************
;*
;* NAME : MTH_CoordTrans  -  Coord Transfer of Vertices
;*
;*     void    MTH_CoordTrans(MthMatrix *matrix, MthXyz *src, MthXyz *ans)
;*
;* PARAMETERS
;*
;* �@�@(1) MthMatrix *matrix - <i> ���W�ϊ��}�g���b�N�X
;* �@�@(2) MthXyz    *src    - <i> �ϊ��O���_���W
;* �@�@(3) MthXyz    *ans    - <o> �ϊ��㒸�_���W
;*
;* DESCRIPTION
;*
;* �}�g���b�N�X���Z�E���_�̍��W�ϊ�
;*
;*	| Xn |	 | M00, M01, M02, M03 | | Xa |   | M00Xa+M01Ya+M02Za+M03 |
;*	| Yn | = | M10, M11, M12, M13 |.| Ya | = | M10Xa+M11Ya+M12Za+M13 |
;*	| Zn |	 | M20, M21, M22, M23 | | Za |   | M20Xa+M21Ya+M22Za+m23 |
;*
;* POSTCONDITIONS
;* 
;* CAVEATS
;* 
;*************************************************************************
;
_MTH_CoordTrans:                ; function: MTH_CoordTrans
          STS		MACH,R2
          STS		MACL,R3
;
          MOV         R5,R7     ; R7 = (Xa, Ya, Za)
          CLRMAC
          MAC.L       @R4+,@R7+
          MAC.L       @R4+,@R7+
          MAC.L       @R4+,@R7+
  	  STS	      MACH,R1
	  STS	      MACL,R0
	  XTRCT	      R1,R0      ; R0 = M00Xa+M01Ya+M02Za
          MOV.L       @R4+,R1
          ADD         R0,R1      ; R1 = R0 + M03
          MOV.L       R1,@(0,R6) ; Xn = R1
;
          MOV         R5,R7     ; R7 = (Xa, Ya, Za)
          CLRMAC
          MAC.L       @R4+,@R7+
          MAC.L       @R4+,@R7+
          MAC.L       @R4+,@R7+
  	  STS	      MACH,R1
	  STS	      MACL,R0
	  XTRCT	      R1,R0      ; R0 = M10Xa+M11Ya+M12Za
          MOV.L       @R4+,R1
          ADD         R0,R1      ; R1 = R0 + M13
          MOV.L       R1,@(4,R6) ; Yn = R1
;
          MOV         R5,R7     ; R7 = (Xa, Ya, Za)
          CLRMAC
          MAC.L       @R4+,@R7+
          MAC.L       @R4+,@R7+
          MAC.L       @R4+,@R7+
  	  STS	      MACH,R1
	  STS	      MACL,R0
	  XTRCT	      R1,R0      ; R0 = M20Xa+M21Ya+M22Za
          MOV.L       @R4+,R1
          ADD         R0,R1      ; R1 = R0 + M23
;
          LDS		R2,MACH
          LDS		R3,MACL
          RTS
          MOV.L       R1,@(8,R6) ; Zn = R1
;
;
;*************************************************************************
;*
;* NAME : MTH_NormalTrans  -  Coord Transfer of Normal
;*
;*     void    MTH_NormalTrans(MthMatrix *matrix, MthXyz *src, MthXyz *ans)
;*
;* PARAMETERS
;*
;* �@�@(1) MthMatrix  *matrix - <i> ���W�ϊ��}�g���b�N�X
;* �@�@(2) MthXyz     *src    - <i> �ϊ��O�@���x�N�g��
;* �@�@(2) MthXyz     *ans    - <o> �ϊ���@���x�N�g��
;*
;* DESCRIPTION
;*
;*	| Xn |	 | M00, M01, M02 | | Xa |   | M00Xa+M01Ya+M02Za |
;*	| Yn | = | M10, M11, M12 |.| Ya | = | M10Xa+M11Ya+M12Za |
;*	| Zn |	 | M20, M21, M22 | | Za |   | M20Xa+M21Ya+M22Za |
;*
;* POSTCONDITIONS
;*
;* CAVEATS
;* 
;*************************************************************************
;
_MTH_NormalTrans:               ; function: MTH_NormalTrans
                                ; frame size=32
          STS		MACH,R2
          STS       MACL,R3
;
          MOV         R5,R7     ; R7 = (Xa, Ya, Za)
          CLRMAC
          MAC.L       @R4+,@R7+
          MAC.L       @R4+,@R7+
          MAC.L       @R4+,@R7+
  	  STS	      MACH,R1
	  STS	      MACL,R0
	  XTRCT	      R1,R0      ; R0 = M00Xa+M01Ya+M02Za
          ADD         #4,R4
          MOV.L       R0,@(0,R6) ; Xn = R0
;
          MOV         R5,R7     ; R7 = (Xa, Ya, Za)
          CLRMAC
          MAC.L       @R4+,@R7+
          MAC.L       @R4+,@R7+
          MAC.L       @R4+,@R7+
  	  STS	      MACH,R1
	  STS	      MACL,R0
	  XTRCT	      R1,R0      ; R0 = M10Xa+M11Ya+M12Za
          ADD         #4,R4
          MOV.L       R0,@(4,R6) ; Yn = R0
;
          MOV         R5,R7     ; R7 = (Xa, Ya, Za)
          CLRMAC
          MAC.L       @R4+,@R7+
          MAC.L       @R4+,@R7+
          MAC.L       @R4+,@R7+
  	  STS	      MACH,R1
	  STS	      MACL,R0
	  XTRCT	      R1,R0      ; R0 = M20Xa+M21Ya+M22Za
;
          LDS       R2,MACH
          LDS       R3,MACL
          RTS
          MOV.L       R0,@(8,R6) ; Zn = R0
;
;
;*************************************************************************
;*
;*  Data Define
;*
;*************************************************************************
;
          .SECTION    SEGA_C,DATA,ALIGN=4
unitMatrix:
          .DATA.L     H'00010000,H'00000000,H'00000000,H'00000000
	  .DATA.L     H'00000000,H'00010000,H'00000000,H'00000000
	  .DATA.L     H'00000000,H'00000000,H'00010000,H'00000000
          .END
