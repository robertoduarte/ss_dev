******************************************************************************System Management & Peripheral Control Library 02/20/95******************************************************************************* Summary- Exclusion control allow use in a multiprocessor environment.- Significant increase in code efficiency.Use of the SMPC interrupt service system limits overhead and service time so that time-outs are minimized while peripheral data transfer efficiency is maximized.- Applications are relieved of timing constraints.When an interrupt-back has been issued by a frame change, SMPC command requests are read from the command cache queue, so that commands are handled gracefully by the SMPC at the next vertical blanking interval.- Automatic IntBack execution and data retrieval.If the user changes the data collection setup, an IntBack is issued and return data collected at the next frame.  While the SMPC is collecting data, previous data can be accessed. A switch to the updated information is possible during the V-blank time between frames.- Ignores disconnected peripheral ports.There is no need for the application to manage the 6Player.- Calling limitations of the slave CPU are automatically recognized.(To preserve memory access efficiency, calls from the slave CPU are disabled in the release version.)* Function SpecificationsFunctions that return a Bool function return the following:    OK ... Success    NG ... FailureFailure can result from the following cases:  - All Functions    Failed to get semaphore (locked out by another process).  - Peripheral Port I/O Functions    IntBack is set.  - Command Request Functions    Command cache overflow    Slave CPU command conflict  - Command request functions that wait for SMPC command execution end    and slClockChange352/slClockChange320    IntBack is issued  - IntBack Setup Function    Peripheral port I/O error    Slave CPU command conflict  - Others    Command requests issued without use of supplied macros or illegal    parameters.* Initialization;----------------------------------------------------------------------;;    Peripheral control initialization;        Prottype: void slInitPeripheral(void);        Contents: Called in slInitSystem; user does not need to call;----------------------------------------------------------------------;* Peripheral Port I/O    Use for control in SH2 direct mode.;----------------------------------------------------------------------;;    Get I/O direction of peripheral port 1;        Prottype: Uint8 slGetPortDir1(void);        Contents: Only the lower 7 bits are valid;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Get I/O direction of peripheral port 2;        Prottype: Uint8 slGetPortDir2(void);        Contents: Only the lower 7 bits are valid;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Set the I/O direction of peripheral port 1;        Prottype: Bool slSetPortDir1(Uint8);        Contents: Only the lower 7 bits are valid;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Set I/O direction of peripheral port 2;        Prottype: Bool slSetPortDir2(Uint8);        Contents: Only the lower 7 bits are valid;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Get peripheral port 1 data;        Prottype: Uint8 slGetPortData1(void);        Contents: Only the lower 7 bits are valid;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Get peripheral port 2 data;        Prottype: Uint8 slGetPortData2(void);        Contents: Only the lower 7 bits are valid;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Set peripheral port 1 data;        Prottype: void slSetPortData1(Uint8);        Contents: Only the lower 7 bits are valid;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Set peripheral port 2 data;        Prottype: void slSetPortData2(Uint8);        Contents: Only the lower 7 bits are valid;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Get peripheral port 1 I/O select mode;        Prottype: Uint8 slGetPortSelect1(void);        Contents: SMPC_CONTROL    ... SMPC control (default);                : SMPC_SH2_DIRECT ... SH2 direct;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Get peripheral port 2 I/O select mode;        Prottype: Uint8 slGetPortSelect2(void);        Contents: SMPC_CONTROL    ... SMPC control (default);                : SMPC_SH2_DIRECT ... SH2 direct;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Set peripheral port 1 I/O select mode;        Prottype: Bool slSetPortSelect1(Uint8);        Contents: SMPC_CONTROL    ... SMPC control (default);                : SMPC_SH2_DIRECT ... SH2 direct;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Set peripheral port 2 I/O select mode;        Prottype: Bool slSetPortSelect2(Uint8);        Contents: SMPC_CONTROL    ... SMPC control (default);                : SMPC_SH2_DIRECT ... SH2 direct;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Get peripheral port 1 external latch input mode;        Prottype: Uint8 slGetPortExt1(void);        Contents: SMPC_EXL_DIS ... Ext. latch input disabled (default);                : SMPC_EXL_ENA ... External latch input enabled;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Get peripheral port 2 external latch input mode;        Prottype: Uint8 slGetPortExt2(void);        Contents: SMPC_EXL_DIS ... Ext. latch input disabled (default);                : SMPC_EXL_ENA ... External latch input enabled;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Set peripheral port 1 external latch input mode;        Prottype: Bool slSetPortExt1(Uint8);        Contents: SMPC_EXL_DIS ... Ext. latch input disabled (default);                : SMPC_EXL_ENA ... External latch input enabled;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Set peripheral port 2 external latch input mode;        Prottype: Bool slSetPortExt2(Uint8);        Contents: SMPC_EXL_DIS ... Ext. latch input disabled (default);                : SMPC_EXL_ENA ... External latch input enabled;----------------------------------------------------------------------;* Peripheral control mode   Set as necessary according to application requirements.;----------------------------------------------------------------------;;    Get peripheral data access speed optimization mode state;        Prottype: Uint8 slGetOptimize(void);        Contents: SMPC_OPT_ENA ... Optimization enabled (default);                : SMPC_OPT_DIS ... Optimization disabled;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Set peripheral speed optimization;        Prottype: Bool slSetOptimize(Uint8);        Contents: SMPC_OPT_ENA ... Optimization enabled (default);                : SMPC_OPT_DIS ... Optimization disabled;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Get peripheral port 1 port mode;        Prottype: Uint8    slGetPortMode1(void);        Contents: SMPC_PORT_15   ... 15 byte mode (default);                : SMPC_PORT_255  ... 255 byte mode;                : SMPC_PORT_ZERO ... 0 byte mode;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Get peripheral port 2 port mode;        Prottype: Uint8    slGetPortMode2(void);        Contents: SMPC_PORT_15   ... 15 byte mode (default);                : SMPC_PORT_255  ... 255 byte mode;                : SMPC_PORT_ZERO ... 0 byte mode;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Set peripheral port 1 port mode;        Prottype: Bool    slSetPortMode1(Uint8);        Contents: SMPC_PORT_15   ... 15 byte mode (default);                : SMPC_PORT_255  ... 255 byte mode;                : SMPC_PORT_ZERO ... 0 byte mode;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Set peripheral port 2 port mode;        Prottype: Bool    slSetPortMode2(Uint8);        Contents: SMPC_PORT_15   ... 15 byte mode (default);                : SMPC_PORT_255  ... 255 byte mode;                : SMPC_PORT_ZERO ... 0 byte mode;----------------------------------------------------------------------;* State Control;----------------------------------------------------------------------;;    Get SMPC reset button state;        Prottype: Uint8 slCheckReset(void);        Contents: SMPC_RES_OFF ... Reset button OFF (default);                : SMPC_RES_ON  ... Reset button ON;                : Once ON, no change until slClearReset is called.;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Clear SMPC reset button status;        Prottype: Bool slClearReset(void);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Clear flag during IntBack setup;        Prottype: Bool slIntBackCancel(void);                : Use when canceling interrupt back settings;----------------------------------------------------------------------;* SMPC Memory Service  Used to access SMPC backup memory.;----------------------------------------------------------------------;;    Get language number in SMPC memory;        Prottype: Uint8 slGetLanguage(void);        Contents: SMPC_ENGLISH  ... English;                : SMPC_DEUTSCH  ... German;                : SMPC_FRANCAIS ... French;                : SMPC_ESPANOL  ... Spanish;                : SMPC_ITALIANO ... Italian;                : SMPC_JAPAN    ... Japanese;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Set language number in SMPC memory;        Prottype: void slSetLanguage(Uint8);        Contents: SMPC_ENGLISH  ... English;                : SMPC_DEUTSCH  ... German;                : SMPC_FRANCAIS ... French;                : SMPC_ESPANOL  ... Spanish;                : SMPC_ITALIANO ... Italian;                : SMPC_JAPAN    ... Japanese;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Get sound effect mode in SMPC memory;        Prottype: Uint8 slGetSoundEffect(void);        Contents: SMPC_EFFECT_ON  ... Sound effects ON;                : SMPC_EFFECT_OFF ... Sound effects OFF;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Set sound effect mode in SMPC memory;        Prottype: void slSetSoundEffect(Uint8);        Contents: SMPC_EFFECT_ON  ... Sound effects ON;                : SMPC_EFFECT_OFF ... Sound effects OFF;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Get audio output mode in SMPC memory;        Prottype: Uint8 slGetSoundOutput(void);        Contents: SMPC_SOUND_STEREO ... Stereo;                : SMPC_SOUND_MONO   ... Monaural;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Set audio output mode in SMPC memory;        Prottype: void slSetSoundOutput(Uint8);        Contents: SMPC_SOUND_STEREO ... Stereo;                : SMPC_SOUND_MONO   ... Monaural;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Get help window mode in SMPC memory;        Prottype: Uint8 slGetHelpWindow(void);        Contents: SMPC_HELP_ENA ... Displayed;                : SMPC_HELP_DIS ... Not displayed;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Set help window mode in SMPC memory;        Prottype: void slSetHelpWindow(Uint8);        Contents: SMPC_HELP_ENA ... Displayed;                : SMPC_HELP_DIS ... Not displayed;----------------------------------------------------------------------;* SMPC Command Request (NO_WAIT)  - Does not wait for SMPC command completion.  - Uses command cache if IntBack is issued.  - The following functions call a routine in ROM and requires the use    of the wait mode. The cache cannot be used as a result.        slClockChange352, slClockChange320;----------------------------------------------------------------------;;    Master SH2 ON;        Prottype: Bool slMasterOn(void);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Slave SH2 ON;        Prottype: Bool slSlaveOn(void);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Slave SH2 OFF;        Prottype: Bool slSlaveOff(void);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Sound ON;        Prottype: Bool slSoundOn(void);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Sound OFF;        Prottype: Bool slSoundOff(void);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    CD ON;        Prottype: Bool slCDOn(void);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    CD OFF;        Prottype: Bool slCDOff(void);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    System reset;        Prottype: Bool slSystemReset(void);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Clock change 352 mode;        Prottype: Bool slClockChange352(void);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Clock change 320 mode;        Prottype: Bool slClockChange320(void);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    NMI request;        Prottype: Bool slNMIRequest(void);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Enable reset;        Prottype: Bool slResetEnable(void);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Disable reset;        Prottype: Bool slResetDisable(void);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Set SMPC memory;        Prottype: Bool slSetSmpcMemory(void);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Set date and time;        Prottype: Bool slSetDateTime(void);----------------------------------------------------------------------;* SMPC Command Request (WAIT)  - Waits for SMPC command completion.  - Fails if IntBack is issued;----------------------------------------------------------------------;;    Master SH2 ON;        Prottype: Bool slMasterOnWait(void);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Slave SH2 ON;        Prottype: Bool slSlaveOnWait(void);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Slave SH2 OFF;        Prottype: Bool slSlaveOffWait(void);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Sound ON;        Prottype: Bool slSoundOnWait(void);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Sound OFF;        Prottype: Bool slSoundOffWait(void);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    CD ON;        Prottype: Bool slCDOnWait(void);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    CD OFF;        Prottype: Bool slCDOffWait(void);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    NMI request;        Prottype: Bool slNMIRequestWait(void);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Enable reset;        Prottype: Bool slResetEnableWait(void);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Disable reset;        Prottype: Bool slResetDisableWait(void);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Set SMPC memory;        Prottype: Bool slSetSmpcMemoryWait(void);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Set date and time;        Prottype: Bool slSetDateTimeWait(void);----------------------------------------------------------------------;* IntBack Setup  The functions below only need to be called once. When settings are  updated, the function may be called without canceling the previous call.  Settings are effective from the next frame and data acquisition starts   from that point.  When settings are modified, data collected in that frame is used   as the reference data of the next frame, and the new settings are  used starting from the data collected in the next frame.  Therefore, collected data can be referenced from the second frame  after the setting is made.  When starting up the library, it is possible to start peripheral data  access without waiting since slInitSystem is set up to get peripheral  data.;----------------------------------------------------------------------;;    Interrupt back (gets SMPC status and peripheral data);        Prottype: Bool slGetStatus(void);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Interrupt back (gets only peripheral data);        Prottype: Bool slGetPeripheral(void);----------------------------------------------------------------------;* Example  This is explains everything!  Peripheral control sample program.;----------------------------------------------------------------------------;void main(){    slInitSystem(TV_320x224, NULL, 1);    {        slSetLanguage(SMPC_JAPAN);        slSetSoundEffect(SMPC_EFFECT_ON);        slSetSoundOutput(SMPC_SOUND_STEREO);        slSetHelpWindow(SMPC_HELP_ENA);        (void)slSetSmpcMemory();    }    {        SmpcDateTime* dt = &(Smpc_Status->rtc);        dt->year = 0x1999;        dt->month = SMPC_FRI | SMPC_DEC;        dt->date = 0x31;        dt->hour = 0x23;        dt->minute = 0x59;        dt->second = 0x59;        (void)slSetDateTime();    }    (void)slResetDisable();    (void)slCDOn();    (void)slSoundOn();    while(TRUE) {        if(slCheckReset() == SMPC_RES_ON) {            (void)slClearReset();            break;        }        if(Per_Connect1) {            PerDigital* pad;            pad = Smpc_Peripheral + 0;            if(!(pad->data & PER_DGT_ST)) break;        }        slSynch();    }    (void)slSoundOff();    (void)slCDOff();    (void)slResetEnable();    (void)slIntBackCancel();    while(TRUE) slSynch();};----------------------------------------------------------------------------;* Library Usage Caveats- Cases of Function Execution Failure* Calls From The Slave SH2 Are Prohibited.With the release version, there is no internal work area taken for the cache-through area, so operation is unpredictable. Exclusion control will not occur correctly and problems such as SMPC deadlock will occur.When it becomes necessary to support calls from the slave SH2, this will be made possible by simply modifying the library to change the cache-through address to the work area .* After Executing slGetPeripheral and slGetStatus...The following functions will fail if an IntBack is being serviced. This is caused due to the assumption made in the library that the command cache forSMPC command requests is not used during wait mode.    slCDOffWait    slCDOnWait    slMasterOnWait    slNMIRequestWait    slResetDisableWait    slResetEnableWait    slSetDateTimeWait    slSetSmpcMemoryWait    slSlaveOffWait    slSlaveOnWait    slSoundOffWait    slSoundOnWaitTo avoid the aforementioned execution failures, call slIntBackCancel and issue the command in the next frame.The following functions will fail even when an IntBack command is not being serviced. This is a function of the SMPC disabling the an IntBack command attimes other than SMPC initialization.    slSetPortDir1,2    slSetPortExt1,2    slSetPortSelect1,2To avoid the problem described above, call slIntBackCancel.* After slIntBackCancel, Failure Occurs with slGetPeripheral Under the  Following Conditions.  - For ports set to SMPC control mode with slSetPortSelect1,2.    - Output mode for the ports is set with slSetPortDir1,2.    - External latch output is enabled with slSetPortExt1,2.    For either or both of the settings above, slGetPeripheral fails.    This fails since the SMPC does not allow IntBack commands to be issued for    purposes other than initial setup.  - Ports 1 and 2 are both set to the SH2 direct mode with slSetPortSelect1,2.    This fails because regardless of the SMPC port input settings, IntBack    commands that return only peripheral data cannot be used when both ports    are in SH2 direct mode.* After slIntBackCancel, Failure Occurs at slGetStatus Under the Following  Conditions.  - For ports set to the SMPC control mode with slSetPortSelect1,2     - Output mode for the ports is set with slSetPortDir1,2.    - External latch output is enabled with slSetPortExt1,2.    For either or both of the settings above, slGetStatus fails.    This fails since the SMPC does not allow IntBack commands to be issued for    purposes other than initial setup.* Performance Limitations  - Maximum number of cached commands: 31  - Maximum peripheral data size: 15 bytes x 30 ports  Supports 15 byte mode data from peripheral devices currently sold as of  April 1, 1995 and future peripheral devices. A 255 byte mode is available by  setting the user defined buffer address to the system variables Smpc_Result  and Smpc_Peripheral. However, library support is necessary for managing data  output by the device.* Extensions* Local Library Function Specifications  Please refer to the assembly source files for details.;----------------------------------------------------------------------;;    Get SMPC semaphore;        Prottype: Bool slGetSmpcSemaphore(void);        Contents: OK ... Success;                : NG ... Failure;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Release SMPC semaphore;        Prottype: Bool slSendSmpcSemaphore(Bool);        Contents: Returns the same value as the parameter.;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Initialize button data;        Prottype: void slPerInitButton(Uint16, void*);        Contents: Initializes Data, Push, Pull;                : The first argument is a dummy;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Set button data;        Prottype: void slPerSetButton(Uint16, void*);        Contents: Sets Data, Push, Pull;                : New digital data is passed to the first argument;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Send unused data;        Prottype: void* slPerReserved(void*, void*);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Send SATURN standard control pad data;        Prottype: void* slPerSaturnPad(void*, void*);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Send SATURN Arcade Racer data;        Prottype: void* slPerSaturnLacing(void*, void*);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Send SATURN analog joystick (Mission Stick) data;        Prottype: void* slPerSaturnAnalog(void*, void*);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Send SATURN mouse data;        Prottype: void* slPerSaturnMouse(void*, void*);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Send SATURN keyboard data;        Prottype: void* slPerSaturnKeyBoard(void*, void*);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Send Genesis 3 button pad data;        Prottype: void* slPerMega3ButtonPad(void*, void*);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Send Genesis 6 button pad data;        Prottype: void* slPerMega6ButtonPad(void*, void*);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Send extended digital device data;        Prottype: void* slExtDigitalDev(void*, void*);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Send extended analog device data;        Prottype: void* slExtAnalogDev(void*, void*);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Send extended pointing device data;        Prottype: void* slExtPointingDev(void*, void*);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Send extended keyboard device data;        Prottype: void* slExtKeyBoardDev(void*, void*);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Send extended Genesis device data;        Prottype: void* slExtMegaDriveDev(void*, void*);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Send unknown device data ;        Prottype: void* slPerUnknownDev(void*, void*);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Send disconnect data;        Prottype: void* slPerNotConnect(void*, void*);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Convert SMPC command number to SMPC command table address;        Prottype: void* slGetSmpcComTbl(Uint8);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Check interrupt back setup state;        Prottype: Bool slIntBackCondition(void);        Contents: OK ... Success;                : NG ... Failure;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Check peripheral I/O select mode;        Prottype: Bool slIntBackSelect(void);        Contents: OK ... Success;                : NG ... Failure;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Check peripheral port mode;        Prottype: Uint32 slIntBackPortMode(Uint32);        Contents: OK ... Success;                : NG ... Failure;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Add to SMPC command cache;        Prottype: Bool slRequestQueue(void*, Uint8);        Contents: OK ... Success;                : NG ... Failure;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Check IntBack flag during calls;        Prottype: Bool slCheckIntBackReq(void);        Contents: OK ... Success;                : NG ... Failure;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Check IntBack setup flag;        Prottype: Bool slCheckIntBackSet(void);        Contents: OK ... Success;                : NG ... Failure;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Set IntBack flag during setup;        Prottype: void slSetIntBack(void);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Update SMPC reset button counter;        Prottype: void slUpdateResetCount(void);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Initialize SMPC peripheral data;        Prottype: void slClearPeripheral(void);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Set SMPC peripheral data;        Prottype: Uint8 slSetPeripheral(Uint8**, void**);        Contents: Call a data transfer function;                : for each connected peripheral;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Set SMPC result data;        Prottype: void slSetResultData(void);        Contents: Transfer service for each port;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Send SMPC command cache;        Prottype: void slSmpcCashSend(void);        Contents: Called every frame during the V_Blank_In interrupt;                : service function. IntBack command issue processing ;                : is also performed here. Call the IntBack command ;                : after a 300[us] wait.;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Flush SMPC command cache;        Prottype: void slSmpcCashBlow(void);        Contents: Called at every V_Blank_Out interrupt service;                : function.  When IntBack is not in effect, cached;                : commands are processed. (Also includes commands that;                : could not be issued during the V-blank.);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Get SMPC status;        Prottype: void slGetSmpcStatus(void);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Get SMPC result data;        Prottype: void slGetSmpcResult(void);        Contents: This is a kludge to force a 32 byte return- it should;                : be optimal for the SMPC?;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Service SMPC interrupt;        Prottype: void slSmpcIntBack(void);        Contents: This is called when IntBack occurs.;                : Only gets OREG.;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Set IntBack command parameter;        Prottype: void slComPrmIntBack(void);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Set SMPC memory setup command parameter;        Prottype: void slComPrmSetMemory(void);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Set time and date setup command parameter;        Prottype: void slComPrmSetTime(void);----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Send SMPC command;        Prottype: Bool slSendSmpcCommand(void*, Uint8);        Contents: OK ... Success;                : NG ... Failure;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Execute reset command;        Prottype: Bool slExecBasicCommand(void*, Uint8);        Contents: OK ... Success;                : NG ... Failure;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Execute system reset;        Prottype: Bool slExecSystemReset(void*, Uint8);        Contents: OK ... Success;                : NG ... Failure;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Execute clock change;        Prottype: Bool slExecClockChange(void*, Uint8);        Contents: OK ... Success;                : NG ... Failure;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Execute get status command;        Prottype: Bool slExecGetStatus(void*, Uint8);        Contents: OK ... Success;                : NG ... Failure;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Execute get peripheral command;        Prottype: Bool slExecGetPeripheral(void*, Uint8);        Contents: OK ... Success;                : NG ... Failure;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Execute SMPC memory setup;        Prottype: Bool slExecSetMemory(void*, Uint8);        Contents: OK ... Success;                : NG ... Failure;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Execute time and date setup;        Prottype: Bool slExecSetTime(void*, Uint8);        Contents: OK ... Success;                : NG ... Failure;----------------------------------------------------------------------;;----------------------------------------------------------------------;;    Request SMPC command;        Prottype: Bool slRequestCommand(Uint8, Uint8);        Contents: OK ... Success;                : NG ... Failure;----------------------------------------------------------------------;