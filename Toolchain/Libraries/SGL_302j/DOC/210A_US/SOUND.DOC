******************************************************************************Sound Control Functions************************************************************************************************************************************************************void slInitSound((Uint8 *)drv, (Uint32)drvsz, (Uint8 *)map, (Uint32)mapsz)******************************************************************************Function: Sets up sound driver and initializes the sound control CPU (MC 68000).The library only support sound driver versions 1.29i and higher. Do not execute these functions with sound drivers with earlier version numbers. Use sddrv_129i and sizeof_129i preset in the library.******************************************************************************Bool slBGMOn((Uint16)Song, (Uint8)Prio, (Uint8)Volume, (Uint8)Rate)******************************************************************************Function: Starts song playback. Sound control number 0 is always used for song playback. Volume is specified in a range from 0 to 127. Rate sets the pitch for the volume. When the rate is specified as 0, that volume is set immediately. Returns FALSE when there is no space available in the command buffer.******************************************************************************Bool slBGMPause()******************************************************************************Function: Pauses song playback. Returns FALSE when there is no space available in the command buffer.******************************************************************************Bool slBGMCont()******************************************************************************Function: Restarts playback of paused song.Returns FALSE when there is no space available in the command buffer.******************************************************************************Bool slBGMOff()******************************************************************************Function: Stops song playback.Returns FALSE when there is no space available in the command buffer.******************************************************************************Bool slBGMFade((Uint8)Volume, (Uint8)Rate)******************************************************************************Function: Gradually fades song playback volume to the specified volume.When Rate is set to 0, the specified volume is set immediately. Returns FALSE when there is no space available in the command buffer.******************************************************************************Bool slBGMTempo((Sint16)Tempo)******************************************************************************Function: Changes the song tempo.Returns FALSE when there is no space available in the command buffer.******************************************************************************Bool slBGMStat()******************************************************************************Function: Checks whether song playback is in progress and returns a flag.1 is returned during playback (or pause) and 0 is returned when stopped.******************************************************************************Bool slSoundAllOff()******************************************************************************Function: Stops all sound sequences. Returns FALSE when there is no space available in the command buffer.******************************************************************************Bool slDSPOff()******************************************************************************Function: Turns DSP off. Returns FALSE when there is no space available in the command buffer.******************************************************************************Bool slSndVolume((Uint8)Volume)******************************************************************************Function: Sets master sound volume output level.Volume is specified in a range from 0 to 127 (however, the lower 3 bits are ignored). When set to 0, no sound is output. Returns FALSE when there is no space available in the command buffer.******************************************************************************Uint8 slSequenceOn((Uint16)Song, (Uint8)Prio, (Uint8)Volume, (Sint8)Pan)******************************************************************************Function: Plays the sound effect from the designated sound pan position.Volume is specified in a range from 0 to 127, and Pan is specified in a range from Left -127 to 0 to +127 (however, the hardware only supports 32 pan positions, so the lower 3 bits are ignored). When -128 is specified, the Pan setting is ignored. Returns FALSE when there is no space in the command or the sound control buffer. Returns the sound control number when the function terminates normally.******************************************************************************Bool slSequenceOff((Uint8)Seqnm)******************************************************************************Function: Stops playback of specified sound effects. Returns FALSE when there is no space available in the command buffer.******************************************************************************Bool slSequenceFade((Uint8)Seqnm, (Uint8)Volume, (Uint8)Rate)******************************************************************************Function: Controls volume of specified sound effects. Specify sound control number, volume, and pitch. Returns FALSE when there is no space available in the command buffer.******************************************************************************Bool slSequenceTempo((Uint8)seqnm, (Sint16)Tempo)******************************************************************************Function: Changes sequence tempo for specified sound effects. Specify the sound control number and tempo. Returns FALSE when there is no space available in the command buffer.******************************************************************************Bool slSequencePause((Uint8)seqnm)******************************************************************************Function: Pauses playback of specified sound effects. Returns FALSE when there is no space available in the command buffer.******************************************************************************Bool slSequenceCont((Uint8)seqnm)******************************************************************************Function: Continues playback of paused sound effects. Returns FALSE when there is no space available in the command buffer.******************************************************************************Bool slSequencePan((Uint8)seqnm, (Uint8)Pan)******************************************************************************Function: Specifies the pan position of sound effects. Pan is specified in a range from Left -127 to 0 to +127 (the lower 3 bits are ignored). When -128 is specified, the Pan settings are ignored. Returns FALSE when there is no space available in the command buffer.******************************************************************************Bool slSequenceReset((Uint8)seqnm)******************************************************************************Function: Initializes volume, tempo, and Pan of the specified sound control number. Volume is set to maximum, tempo is normal, and Pan is not set. Returns FALSE when there is no space available in the command buffer.******************************************************************************Bool slSequenceStat((Uint8)seqnm)******************************************************************************Function: Checks whether the specified sound control number sequence is playing and returns a flag. 1 is returned for playback (or pause), and 0 is returned when the sequence is stopped.******************************************************************************void *slSndMapChange((Uint8)map)******************************************************************************Function: Changes the current sound map. After transferring the sound data, set the transfer complete bit for the work area. The return value is the address of the command buffer where the parameters was set. Returns FALSE when there is no space available in the command buffer.Example:  typedef struct sndmap{      Sint8       ID;      Sint8       ST_Addr[3];      Sint8       LdFlag;      Sint8       AR_Size[3];  }SOUNDMAP;  void init_sound(){      SOUNDMAP    *smptrs, *smptrd;      slWaitSound(slSndMapChange(0)); /* Waits for current map to switch */      smptrs = (SOUNDMAP *)soundmap;      smptrd = (SOUNDMAP *)SoundCTRL;      while(smptrs->ID >= 0){          smptrd->LdFlag = -1;        /* Map Load Flag */          smptrs++;          smptrd++;      }      slDMACopy(sounddat, (void *)(SoundSeqBuf), sizeof(sounddat));  }******************************************************************************Uint8 slSndSeqNum()******************************************************************************Function: Returns unused sound sequence numbers. 0 is returned when none are available. When the sound sequence number is available, a value from 1 to 7 is returned.******************************************************************************Sint8 slSndPCMNum((Uint8)mode)******************************************************************************Function: Returns open PCM channel numbers. 1 is returned when none are available. A value from 0 to 7 is returned when a channel number is available. Specify _Stereo or _Mono for mode.PCM can play up to 8 sounds. When using stereo playback, two audio channels are required, so note that even if only 4 channel numbers are used,  8 sounds may actually be output.******************************************************************************void slWaitSound((void *)addr)******************************************************************************Function:Waits until the data at the specified address is 0. Indicates the completion of a function by the sound driver.******************************************************************************Bool slCDDAOn((Uint8)LLevel, (Uint8)RLevel, (Sint8)LPan, (Sint8)RPan)******************************************************************************Function:Specifies volume and pan position for CD-D/A playback. The level can be specified from 0 (Off) to 127 (lower 4 bits are ignored). Pan is specified from -127 Left to 0 to +127 Right (lower 3 bits are ignored). Returns FALSE when there is no space available in the command buffer.******************************************************************************Bool slCDDAOff()******************************************************************************Function:Stops CD-D/A output. Returns FALSE when there is no space available in the command buffer.******************************************************************************Sint8 slPCMOn(PCM *pdat, (void *)data, (Uint32)size)******************************************************************************Function:Plays back PCM music (sound effects). data should be set in the PCM playback data table. In stereo playback, the first half is assigned to the right channel and the second half for the left.        +-------------------------+        |                         |        | R data                  |        | (frame * datasize byte) |        +-------------------------+        |                         |        | L data                  |        |                         |        +-------------------------+PCM data is a structure in the following format.  typedef struct {      Uint8   mode;        /* Playback mode */      Uint8   channel;     /* Playback channel */      Uint8   level;       /* Playback level */      Sint8   pan;         /* Playback pan */      Uint16  pitch;       /* Playback pitch */      Uint8   eflevelR;    /* Effect level (right and mono) */      Uint8   efselectR;   /* Effect number (right and mono) */      Uint8   eflevelL;    /* Effect level (left) */      Uint8   efselectL;   /* Effect number (left) */  } PCM;The following are set for the playback mode:<_Stereo or _Mono> and <_PCM16Bit or _PCM8Bit>The playback channel is set by slPCMOn (return value for normal termination). Playback level is set from 0 to 127 (lower 4 bits are ignored), and playback pan is set from -127 Left to 0 to +127 Right (lower 3 bits are ignored). Playback pitch is set at 16 bit, 44 KHz. The effect level can be specified from 0 to 7, and the effect number can be specified from 0 to 15.The return value is 0 to 7 for normal completion, -1 when there is not enough room in the command buffer, -2 when there is no PCM channel available, and -3 when there is not enough room in the PCM buffer.The PCM playback started with this function stops with the end of data.Note:When the playback data resides in work RAM-L, the following restrictions arein effect.  - Playback data must be located from an even address.    (The lower 1 bit of the address is used as 0.)    -> Place data from an even address.    - When playback data is stereo 8 bit, the left channel data must be    located from an even address.    -> Adjust the number of samples to be even.    - A noise glitch occurs when playback data is over 8192 frames and    overflows the buffer.    -> Define the data so that 1 byte is duplicated every 8192 frames.       However, the start of data will begin with a frame offset of 1536       frames (600H).  Accordingly, the first data that is duplicated is       at 6656 (1A00H).******************************************************************************Bool slPCMOff(PCM *pdat)******************************************************************************Function: Stops PCM playback on the specified channel. Returns FALSE when there is no space available in the command buffer.******************************************************************************Bool slPCMParmChange(PCM *pdat)******************************************************************************Function: Changes each PCM playback parameter. Returns FALSE when there is no space available in the command buffer.******************************************************************************Bool slPCMStat(PCM *pdat)******************************************************************************Function: Checks whether the specified PCM channel is in playback mode and returns a flag. 1 is returned if playback is in progress. 0 is returned if playback is completed.******************************************************************************Bool slSndEffect((Uint8)effect)******************************************************************************Function: Switches DSP effect program. Returns FALSE when there is no space available in the command buffer.******************************************************************************Bool slSndMixChange((Uint8)tbank, (Uint8)mixno)******************************************************************************Function: Switches a mixer for a tone bank. Returns FALSE when there is no space available in the command buffer.******************************************************************************Bool slSndMixParmChange((Uint8)mixno, (Uint8)level, (Sint8)pan)******************************************************************************Function: Changes mixer parameters. The volume level can be set from 0 to 127 (lower 4 bits are ignored) and pan can be set from -128 Left to 0 to +127 Right (lower 3 bits are ignored). Returns FALSE when there is no space available in the command buffer.******************************************************************************Sint8 slSoundRequest(const char form[], ...)******************************************************************************Function: Sets data passed directly to the sound driver. The individual data sizes that follow are represented as character string data in form.However, the starting data is a function code that is not included in the character string. -2 is returned when an illegal character is present in the form character string. -1 is returned when a word data is set at an odd address.  0 is returned when the function terminates normally.Example:  slSoundRequest("bbwwwbb", SND_PCM_START, _Stereo|PCM16Bit, Level7<<5,                  StreamBuf >> 4, StreamSize, Pitch, 0, 0);  SND_PCM_START is the function code in this case. This is not included  in the character string. _Stereo|PCM16Bit and Level7<<5 are both byte  data. StreamBuf>>4, StreamSize, and Pitch are passed to the sound driver  as word data.******************************************************************************void slSoundAllPause()******************************************************************************Function: Pauses all sequences (including songs) that are playing. (However, PCM stream playback does not stop.)******************************************************************************void slSoundAllCont()******************************************************************************Function: Continues all sequences (including songs) which were paused.******************************************************************************void slSndFlush()******************************************************************************Function: Outputs control commands remaining in the sound control buffer to the sound driver. Normally, sound control commands are set in a buffer set up by the system.  The commands are output to the sound driver when the buffer becomes full or when the slSynch() function is executed.However, commands are output immediately to the buffer for the following functions:  slSndMapChange()  slDSPOff()  slPCMOff()  slSoundRequest()  slSoundAllPause()  slSoundAllCont()When the following functions are executed, all commands in the buffer are cleared:  slSoundAllOff()