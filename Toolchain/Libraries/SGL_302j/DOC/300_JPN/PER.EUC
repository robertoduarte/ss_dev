;
;	System Management & Peripheral Control Library
;					1995/02/20  by 'Artemis' T.Ono


● 概要

	◎ 排他制御を行なっているので、マルチプロセス環境での使用が可能。
	◎ コード効率の大幅ＵＰ。
		ＳＭＰＣ割り込み処理関数での処理時間の短縮および、
		オーバーヘッドを一定に保っているため、ペリフェラルデータ取得の
		最適化をしている時でもタイムオーバーが発生しにくい。
	◎ アプリケーションからあらゆるタイミングで呼び出す事ができる。
		ＳＭＰＣコマンドをリクエストしたフレームで既にインタラプトバックが
		発行されていた場合、コマンドキャッシュにキューイングされ、
		次のＶブランクで適切にＳＭＰＣへのコマンド発行が行なわれる。
	◎ インタラプトバック発行・データ収集は全自動。
		ユーザーがデータ収集の設定を変更すると、次のフレームからは
		自動的にインタラプトバックを発行してデータ収集が行なわれる。
		ＳＭＰＣがデータ収集中でも以前のデータを参照でき、
		フレームが変わるＶブランク中に最新の情報に切り替わる。
	◎ ペリフェラル未接続ポートのスキップ機能。
		マルチタップを一切意識する必要が無い。
	◎ スレーブＣＰＵのコマンド発行制限を自動識別。
		（ただし、配布版ではメモリアクセス効率ＵＰの為、
		スレーブＣＰＵからの呼び出しは許可していない）


● 関数詳細

	戻り値が Bool の関数は、実行結果を返す。
		OK ... 成功
		NG ... 失敗

	失敗した場合、以下の状況が考えられる。

		全ての関数

			○ セマフォの取得ができない（他プロセスにてロック中）

		ペリフェラルポート入出力関数

			○ インタラプトバック設定がされている

		コマンドリクエスト関数

			○ コマンドキャッシュオーバーフロー
			○ スレーブＣＰＵのコマンド発行制限に抵触する

		コマンドリクエスト関数のうち、ＳＭＰＣのコマンド実行終了を待つもの
		および、slClockChange352, slClockChange320

			○ インタラプトバックが発行されている

		インタラプトバック設定関数

			○ ペリフェラルポート入出力設定が正しくない
			○ スレーブＣＰＵのコマンド発行制限に抵触する

		その他、付属のマクロを使用せずに不正なパラメータを用いて
		コマンドリクエストした場合

	◎ 初期化

;-------------------------------------------------------------------------------;
;	ペリフェラル制御の初期化
;		Prottype	: void slInitPeripheral(void)
;		Contents	: slInitSystem の中で呼び出しているので
;				: ユーザーが呼ぶ必要はない
;-------------------------------------------------------------------------------;

	◎ ペリフェラルポート入出力
		○ ＳＨ２ダイレクトモードでの制御に使用

;-------------------------------------------------------------------------------;
;	ペリフェラルポート１の入出力方向を取得
;		Prottype	: Uint8 slGetPortDir1(void)
;		Contents	: 下位７ビットのみ有効
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ペリフェラルポート２の入出力方向を取得
;		Prottype	: Uint8 slGetPortDir2(void)
;		Contents	: 下位７ビットのみ有効
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ペリフェラルポート１の入出力方向を設定
;		Prottype	: Bool slSetPortDir1(Uint8)
;		Contents	: 下位７ビットのみ有効
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ペリフェラルポート２の入出力方向を設定
;		Prottype	: Bool slSetPortDir2(Uint8)
;		Contents	: 下位７ビットのみ有効
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ペリフェラルポート１のデータを取得
;		Prottype	: Uint8 slGetPortData1(void)
;		Contents	: 下位７ビットのみ有効
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ペリフェラルポート２のデータを取得
;		Prottype	: Uint8 slGetPortData2(void)
;		Contents	: 下位７ビットのみ有効
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ペリフェラルポート１のデータを設定
;		Prottype	: void slSetPortData1(Uint8)
;		Contents	: 下位７ビットのみ有効
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ペリフェラルポート２のデータを設定
;		Prottype	: void slSetPortData2(Uint8)
;		Contents	: 下位７ビットのみ有効
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ペリフェラルポート１の入出力セレクトモードを取得
;		Prottype	: Uint8 slGetPortSelect1(void)
;		Contents	: SMPC_CONTROL    ... ＳＭＰＣコントロール（初期値）
;				: SMPC_SH2_DIRECT ... ＳＨ２ダイレクト
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ペリフェラルポート２の入出力セレクトモードを取得
;		Prottype	: Uint8 slGetPortSelect2(void)
;		Contents	: SMPC_CONTROL    ... ＳＭＰＣコントロール（初期値）
;				: SMPC_SH2_DIRECT ... ＳＨ２ダイレクト
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ペリフェラルポート１の入出力セレクトモードを設定
;		Prottype	: Bool slSetPortSelect1(Uint8)
;		Contents	: SMPC_CONTROL    ... ＳＭＰＣコントロール（初期値）
;				: SMPC_SH2_DIRECT ... ＳＨ２ダイレクト
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ペリフェラルポート２の入出力セレクトモードを設定
;		Prottype	: Bool slSetPortSelect2(Uint8)
;		Contents	: SMPC_CONTROL    ... ＳＭＰＣコントロール（初期値）
;				: SMPC_SH2_DIRECT ... ＳＨ２ダイレクト
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ペリフェラルポート１の外部ラッチ入力モードを取得
;		Prottype	: Uint8 slGetPortExt1(void)
;		Contents	: SMPC_EXL_DIS ... 外部ラッチ入力禁止（初期値）
;				: SMPC_EXL_ENA ... 外部ラッチ入力許可
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ペリフェラルポート２の外部ラッチ入力モードを取得
;		Prottype	: Uint8 slGetPortExt2(void)
;		Contents	: SMPC_EXL_DIS ... 外部ラッチ入力禁止（初期値）
;				: SMPC_EXL_ENA ... 外部ラッチ入力許可
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ペリフェラルポート１の外部ラッチ入力モードを設定
;		Prottype	: Bool slSetPortExt1(Uint8)
;		Contents	: SMPC_EXL_DIS ... 外部ラッチ入力禁止（初期値）
;				: SMPC_EXL_ENA ... 外部ラッチ入力許可
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ペリフェラルポート２の外部ラッチ入力モードを設定
;		Prottype	: Bool slSetPortExt2(Uint8)
;		Contents	: SMPC_EXL_DIS ... 外部ラッチ入力禁止（初期値）
;				: SMPC_EXL_ENA ... 外部ラッチ入力許可
;-------------------------------------------------------------------------------;

	◎ ペリフェラルコントロールモード
		○ アプリケーションの仕様により、必要なら設定

;-------------------------------------------------------------------------------;
;	ペリフェラル取得時間最適化モードを取得
;		Prottype	: Uint8 slGetOptimize(void)
;		Contents	: SMPC_OPT_ENA ... 取得時間最適化許可（初期値）
;				: SMPC_OPT_DIS ... 取得時間最適化禁止
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ペリフェラル取得時間最適化モードを設定
;		Prottype	: Bool slSetOptimize(Uint8)
;		Contents	: SMPC_OPT_ENA ... 取得時間最適化許可（初期値）
;				: SMPC_OPT_DIS ... 取得時間最適化禁止
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ペリフェラルポート１のポートモードを取得
;		Prottype	: Uint8	slGetPortMode1(void)
;		Contents	: SMPC_PORT_15   ... １５バイトモード（初期値）
;				: SMPC_PORT_255  ... ２５５バイトモード
;				: SMPC_PORT_ZERO ... ０バイトモード
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ペリフェラルポート２のポートモードを取得
;		Prottype	: Uint8	slGetPortMode2(void)
;		Contents	: SMPC_PORT_15   ... １５バイトモード（初期値）
;				: SMPC_PORT_255  ... ２５５バイトモード
;				: SMPC_PORT_ZERO ... ０バイトモード
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ペリフェラルポート１のポートモードを設定
;		Prottype	: Bool	slSetPortMode1(Uint8)
;		Contents	: SMPC_PORT_15   ... １５バイトモード（初期値）
;				: SMPC_PORT_255  ... ２５５バイトモード
;				: SMPC_PORT_ZERO ... ０バイトモード
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ペリフェラルポート２のポートモードを設定
;		Prottype	: Bool	slSetPortMode2(Uint8)
;		Contents	: SMPC_PORT_15   ... １５バイトモード（初期値）
;				: SMPC_PORT_255  ... ２５５バイトモード
;				: SMPC_PORT_ZERO ... ０バイトモード
;-------------------------------------------------------------------------------;

	◎ 状態制御

;-------------------------------------------------------------------------------;
;	ＳＭＰＣリセットボタン状態を取得
;		Prottype	: Uint8 slCheckReset(void)
;		Contents	: SMPC_RES_OFF ... リセットボタンＯＦＦ（初期値）
;				: SMPC_RES_ON  ... リセットボタンＯＮ
;				: 一度 ON になると slClearReset を呼ぶまで変化しない
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ＳＭＰＣリセットボタン状態をクリア
;		Prottype	: Bool slClearReset(void)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	インタラプトバック設定中フラグをクリア
;		Prottype	: Bool slIntBackCancel(void)
;				: インタラプトバック設定を解除する時に使用
;-------------------------------------------------------------------------------;

	◎ ＳＭＰＣメモリ変換サービス
		○ ＳＭＰＣ保持メモリアクセス時に使用

;-------------------------------------------------------------------------------;
;	ＳＭＰＣメモリ言語番号を取得
;		Prottype	: Uint8 slGetLanguage(void)
;		Contents	: SMPC_ENGLISH  ... 英語
;				: SMPC_DEUTSCH  ... ドイツ語
;				: SMPC_FRANCAIS ... フランス語
;				: SMPC_ESPANOL  ... スペイン語
;				: SMPC_ITALIANO ... イタリア語
;				: SMPC_JAPAN    ... 日本語
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ＳＭＰＣメモリ言語番号を設定
;		Prottype	: void slSetLanguage(Uint8)
;		Contents	: SMPC_ENGLISH  ... 英語
;				: SMPC_DEUTSCH  ... ドイツ語
;				: SMPC_FRANCAIS ... フランス語
;				: SMPC_ESPANOL  ... スペイン語
;				: SMPC_ITALIANO ... イタリア語
;				: SMPC_JAPAN    ... 日本語
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ＳＭＰＣメモリ効果音モードを取得
;		Prottype	: Uint8 slGetSoundEffect(void)
;		Contents	: SMPC_EFFECT_ON  ... 効果音ＯＮ
;				: SMPC_EFFECT_OFF ... 効果音ＯＦＦ
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ＳＭＰＣメモリ効果音モードを設定
;		Prottype	: void slSetSoundEffect(Uint8)
;		Contents	: SMPC_EFFECT_ON  ... 効果音ＯＮ
;				: SMPC_EFFECT_OFF ... 効果音ＯＦＦ
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ＳＭＰＣメモリ音声出力モードを取得
;		Prottype	: Uint8 slGetSoundOutput(void)
;		Contents	: SMPC_SOUND_STEREO ... ステレオ
;				: SMPC_SOUND_MONO   ... モノラル
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ＳＭＰＣメモリ音声出力モードを設定
;		Prottype	: void slSetSoundOutput(Uint8)
;		Contents	: SMPC_SOUND_STEREO ... ステレオ
;				: SMPC_SOUND_MONO   ... モノラル
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ＳＭＰＣメモリヘルプウィンドウモードを取得
;		Prottype	: Uint8 slGetHelpWindow(void)
;		Contents	: SMPC_HELP_ENA ... 表示する
;				: SMPC_HELP_DIS ... 表示しない
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ＳＭＰＣメモリヘルプウィンドウモードを設定
;		Prottype	: void slSetHelpWindow(Uint8)
;		Contents	: SMPC_HELP_ENA ... 表示する
;				: SMPC_HELP_DIS ... 表示しない
;-------------------------------------------------------------------------------;

	◎ ＳＭＰＣコマンドリクエスト（ NO_WAIT ）
		○ ＳＭＰＣのコマンド実行終了を待たない
		○ インタラプトバックが発行されていたらコマンドキャッシュを使用
		○ 以下の関数はＲＯＭ内ルーチンを呼び出すため、
			ウエイトモードとなり、キャッシュ使用不可
			slClockChange352, slClockChange320

;-------------------------------------------------------------------------------;
;	マスタ　ＳＨ２　ＯＮ
;		Prottype	: Bool slMasterOn(void)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	スレーブ　ＳＨ２　ＯＮ
;		Prottype	: Bool slSlaveOn(void)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	スレーブ　ＳＨ２　ＯＦＦ
;		Prottype	: Bool slSlaveOff(void)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	サウンド　ＯＮ
;		Prottype	: Bool slSoundOn(void)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	サウンド　ＯＦＦ
;		Prottype	: Bool slSoundOff(void)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ＣＤ　ＯＮ
;		Prottype	: Bool slCDOn(void)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ＣＤ　ＯＦＦ
;		Prottype	: Bool slCDOff(void)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	システム全体リセット
;		Prottype	: Bool slSystemReset(void)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	クロックチェンジ３５２モード
;		Prottype	: Bool slClockChange352(void)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	クロックチェンジ３２０モード
;		Prottype	: Bool slClockChange320(void)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ＮＭＩリクエスト
;		Prottype	: Bool slNMIRequest(void)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	リセットイネーブル
;		Prottype	: Bool slResetEnable(void)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	リセットディスエーブル
;		Prottype	: Bool slResetDisable(void)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ＳＭＰＣメモリ設定
;		Prottype	: Bool slSetSmpcMemory(void)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	時刻設定
;		Prottype	: Bool slSetDateTime(void)
;-------------------------------------------------------------------------------;

	◎ ＳＭＰＣコマンドリクエスト（ WAIT ）
		○ ＳＭＰＣのコマンド実行終了を待つ
		○ インタラプトバックが発行されていたら失敗する

;-------------------------------------------------------------------------------;
;	マスタ　ＳＨ２　ＯＮ
;		Prottype	: Bool slMasterOnWait(void)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	スレーブ　ＳＨ２　ＯＮ
;		Prottype	: Bool slSlaveOnWait(void)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	スレーブ　ＳＨ２　ＯＦＦ
;		Prottype	: Bool slSlaveOffWait(void)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	サウンド　ＯＮ
;		Prottype	: Bool slSoundOnWait(void)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	サウンド　ＯＦＦ
;		Prottype	: Bool slSoundOffWait(void)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ＣＤ　ＯＮ
;		Prottype	: Bool slCDOnWait(void)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ＣＤ　ＯＦＦ
;		Prottype	: Bool slCDOffWait(void)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ＮＭＩリクエスト
;		Prottype	: Bool slNMIRequestWait(void)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	リセットイネーブル
;		Prottype	: Bool slResetEnableWait(void)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	リセットディスエーブル
;		Prottype	: Bool slResetDisableWait(void)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ＳＭＰＣメモリ設定
;		Prottype	: Bool slSetSmpcMemoryWait(void)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	時刻設定
;		Prottype	: Bool slSetDateTimeWait(void)
;-------------------------------------------------------------------------------;

	◎ インタラプトバック設定
		○ 一度だけ呼べばよく、設定を変更する時も解除せずにそのまま呼べる
		○ 次のフレームから設定が有効となり、データ収集を開始する
		○ 設定を変更した場合、そのフレームで収集したデータは
			次のフレームでの参照データに反映され、
			次のフレームでの収集データから
			新しい設定が反映される
		○ したがって、収集したデータを参照できるのは
			設定後２フレーム目からとなる
		○ライブラリ起動時は、slInitSystem でペリフェラルデータのみ取得の
			設定をしているので、ウエイトせずにペリフェラルの参照を
			開始する事ができる

;-------------------------------------------------------------------------------;
;	インタラプトバック（ＳＭＰＣステータス・ペリフェラルデータを取得）
;		Prottype	: Bool slGetStatus(void)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	インタラプトバック（ペリフェラルデータのみ取得）
;		Prottype	: Bool slGetPeripheral(void)
;-------------------------------------------------------------------------------;


● 使用法

	◎ これで全てがわかる！
		ペリフェラル制御サンプルプログラム

;-------------------------------------------------------------------------------;

void main()
{
	slInitSystem(TV_320x224, NULL, 1);
	{
		slSetLanguage(SMPC_JAPAN);
		slSetSoundEffect(SMPC_EFFECT_ON);
		slSetSoundOutput(SMPC_SOUND_STEREO);
		slSetHelpWindow(SMPC_HELP_ENA);
		(void)slSetSmpcMemory();
	}

	{
		SmpcDateTime* dt = &(Smpc_Status->rtc);

		dt->year = 0x1999;
		dt->month = SMPC_FRI | SMPC_DEC;
		dt->date = 0x31;
		dt->hour = 0x23;
		dt->minute = 0x59;
		dt->second = 0x59;
		(void)slSetDateTime();
	}

	(void)slResetDisable();
	(void)slCDOn();
	(void)slSoundOn();

	while(TRUE) {
		if(slCheckReset() == SMPC_RES_ON) {
			(void)slClearReset();
			break;
		}

		if(Per_Connect1) {
			PerDigital* pad;

			pad = Smpc_Peripheral + 0;
			if(!(pad->data & PER_DGT_ST)) break;
		}
		slSynch();
	}

	(void)slSoundOff();
	(void)slCDOff();
	(void)slResetEnable();
	(void)slIntBackCancel();

	while(TRUE) slSynch();
}

;-------------------------------------------------------------------------------;


● ライブラリ使用時の禁じ手および、
	ファンクションコール手順による実行失敗の例

	◎ スレーブＳＨ２からの呼び出しは禁止。
		配布版では内部ワークエリアをキャッシュスルー領域に取っていないので、
		動作が不定となる。
		特に排他制御が正常に行なわれない為、ＳＭＰＣがデッドロックするなどの
		不具合が生じる。
		今後、スレーブＳＨ２からの呼び出しをサポートする必要が生じた場合は
		ワークエリアをキャッシュスルーアドレスにする修正のみで可。

	◎ "slGetPeripheral" および "slGetStatus" 実行後、
		以下の関数が呼び出された時にイントバックコマンドを実行中だった場合、
		実行に失敗する。
		これはウエイトモードでのＳＭＰＣコマンドリクエストが
		コマンドキャッシュを使用しない事を前提としているため。

		slCDOffWait
		slCDOnWait
		slMasterOnWait
		slNMIRequestWait
		slResetDisableWait
		slResetEnableWait
		slSetDateTimeWait
		slSetSmpcMemoryWait
		slSlaveOffWait
		slSlaveOnWait
		slSoundOffWait
		slSoundOnWait

		上記の実行失敗を回避するには、"slIntBackCancel" を呼び出し、
		次のフレームでコマンド発行すればよい。

		以下の関数はイントバックコマンド実行中でなくても実行に失敗する。
		これはＳＭＰＣが初期設定状態以外でのイントバックコマンドの発行を
		禁止しているため。

		slSetPortDir1,2
		slSetPortExt1,2
		slSetPortSelect1,2

		上記の実行失敗を回避するには、"slIntBackCancel" を呼び出せばよい。

	◎ "slIntBackCancel" 実行後、以下の条件を設定した場合、
		"slGetPeripheral" の呼出しで失敗となる。

		"slSetPortSelect1,2" でＳＭＰＣコントロールモードにしたポートについて
			"slSetPortDir1,2" で出力設定にした。
			"slSetPortExt1,2" で外部ラッチ入力を許可した。
			上記いずれかの場合および、両方設定した場合。

		これはＳＭＰＣが初期設定状態以外でのイントバックコマンドの発行を
		禁止しているため。

		"slSetPortSelect1,2" でポート１・２を共にＳＨ２ダイレクトモードにした。

		これはＳＭＰＣがポート入出力設定に関わらず、
		ポートセレクトが共にＳＨ２ダイレクトモードの時は、
		ペリフェラルデータのみを返すイントバックコマンドの
		発行を禁止しているため。

	◎ "slIntBackCancel" 実行後、以下の条件を設定した場合、
		"slGetStatus" の呼出しで失敗となる。

		"slSetPortSelect1,2" でＳＭＰＣコントロールモードにしたポートについて
			"slSetPortDir1,2" で出力設定にした。
			"slSetPortExt1,2" で外部ラッチ入力を許可した。
			上記いずれかの場合および、両方設定した場合。

		これはＳＭＰＣが初期設定状態以外でのイントバックコマンドの発行を
		禁止しているため。


● 限界性能

	◎ 最大キャッシングコマンド数   ... ３１個
	◎ 最大ペリフェラルデータサイズ ... １５バイト ＊ ３０ポート
		９５年４月１日現在で発売されているペリフェラルデバイスおよび、
		今後発売されるペリフェラルデバイスからの１５バイトモードでの
		データ取得に対応。
		システム変数 "Smpc_Result" および "Smpc_Peripheral" への
		ユーザー定義バッファアドレスの登録により、
		２５５バイトモードによるデータ取得が可能。
		ただし、デバイス固有のデータ変換処理を行なうには
		ライブラリサポートが必要。


● おまけ

	◎ ライブラリローカル関数仕様
		詳しくはアセンブリソースファイルを見てね

;-------------------------------------------------------------------------------;
;	ＳＭＰＣセマフォの獲得
;		Prottype	: Bool slGetSmpcSemaphore(void)
;		Contents	: OK ... 成功
;				: NG ... 失敗
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ＳＭＰＣセマフォの解放
;		Prottype	: Bool slSendSmpcSemaphore(Bool)
;		Contents	: 引数と同じ値が返る
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ボタンデータ初期化
;		Prottype	: void slPerInitButton(Uint16, void*)
;		Contents	: Data, Push, Pull の初期化
;				: 第一引数は偽物です
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ボタンデータ設定
;		Prottype	: void slPerSetButton(Uint16, void*)
;		Contents	: Data, Push, Pull の設定
;				: 第一引数に新デジタルデータを渡す
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	未使用データ転送
;		Prottype	: void* slPerReserved(void*, void*)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	サターン標準パッドデータ転送
;		Prottype	: void* slPerSaturnPad(void*, void*)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	サターンレーシングコントローラーデータ転送
;		Prottype	: void* slPerSaturnLacing(void*, void*)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	サターンアナログジョイスティックデータ転送
;		Prottype	: void* slPerSaturnAnalog(void*, void*)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	サターンマウスデータ転送
;		Prottype	: void* slPerSaturnMouse(void*, void*)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	サターンキーボードデータ転送
;		Prottype	: void* slPerSaturnKeyBoard(void*, void*)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	メガドライブ３ボタンパッドデータ転送
;		Prottype	: void* slPerMega3ButtonPad(void*, void*)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	メガドライブ６ボタンパッドデータ転送
;		Prottype	: void* slPerMega6ButtonPad(void*, void*)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	拡張サイズデジタルデバイスデータ転送
;		Prottype	: void* slExtDigitalDev(void*, void*)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	拡張サイズアナログデバイスデータ転送
;		Prottype	: void* slExtAnalogDev(void*, void*)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	拡張サイズポインティングデバイスデータ転送
;		Prottype	: void* slExtPointingDev(void*, void*)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	拡張サイズキーボードデバイスデータ転送
;		Prottype	: void* slExtKeyBoardDev(void*, void*)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	拡張サイズメガドライブデバイスデータ転送
;		Prottype	: void* slExtMegaDriveDev(void*, void*)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	不明デバイスデータ転送
;		Prottype	: void* slPerUnknownDev(void*, void*)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	未接続データ転送
;		Prottype	: void* slPerNotConnect(void*, void*)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ＳＭＰＣコマンド番号をＳＭＰＣコマンドテーブルアドレスに変換
;		Prottype	: void* slGetSmpcComTbl(Uint8)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	インタラプトバック設定条件のチェック
;		Prottype	: Bool slIntBackCondition(void)
;		Contents	: OK ... 成功
;				: NG ... 失敗
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ペリフェラル入出力セレクトモードのチェック
;		Prottype	: Bool slIntBackSelect(void)
;		Contents	: OK ... 成功
;				: NG ... 失敗
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ペリフェラルポートモードのチェック
;		Prottype	: Uint32 slIntBackPortMode(Uint32)
;		Contents	: OK ... 成功
;				: NG ... 失敗
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ＳＭＰＣコマンドキャッシュに追加
;		Prottype	: Bool slRequestQueue(void*, Uint8)
;		Contents	: OK ... 成功
;				: NG ... 失敗
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	インタラプトバック発行中フラグのチェック
;		Prottype	: Bool slCheckIntBackReq(void)
;		Contents	: OK ... 成功
;				: NG ... 失敗
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	インタラプトバック設定中フラグのチェック
;		Prottype	: Bool slCheckIntBackSet(void)
;		Contents	: OK ... 成功
;				: NG ... 失敗
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	インタラプトバック設定中フラグをセット
;		Prottype	: void slSetIntBack(void)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ＳＭＰＣリセットボタンカウンターを更新
;		Prottype	: void slUpdateResetCount(void)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ＳＭＰＣペリフェラルデータ初期化
;		Prottype	: void slClearPeripheral(void)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ＳＭＰＣペリフェラルデータ設定
;		Prottype	: Uint8 slSetPeripheral(Uint8**, void**)
;		Contents	: 接続されているペリフェラル毎に、
;				: データ転送関数を呼び出す
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ＳＭＰＣリザルトデータ設定
;		Prottype	: void slSetResultData(void)
;		Contents	: ポート毎の転送処理
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ＳＭＰＣコマンドキャッシュの送信
;		Prottype	: void slSmpcCashSend(void)
;		Contents	: V_Blank_In 割り込み処理関数から、
;				: フレーム単位（フレームの変わり目）で呼び出す
;				: IntBack コマンド発行処理もここで行なわれる
;				: 300[us] 数えてから呼んでね
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ＳＭＰＣコマンドキャッシュの排出
;		Prottype	: void slSmpcCashBlow(void)
;		Contents	: V_Blank_Out 割り込み処理関数から、
;				: 毎回（毎Ｖ）呼び出す
;				: IntBack をしてない時に、キャッシングされている
;				: コマンドをここで処理する
;				: （Ｖブランク中に発行しきれなかった分も含む）
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ＳＭＰＣステータスを取得
;		Prottype	: void slGetSmpcStatus(void)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ＳＭＰＣリザルトデータを取得
;		Prottype	: void slGetSmpcResult(void)
;		Contents	: 無条件で３２バイト取得する猿ルーチンだけど、
;				: ＳＭＰＣにはこれが最適でしょ？
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ＳＭＰＣ割り込み処理
;		Prottype	: void slSmpcIntBack(void)
;		Contents	: IntBack の発生でここが呼ばれる
;				: OREG を取得する以外何もしない
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	インタラプトバックコマンドパラメータ設定
;		Prottype	: void slComPrmIntBack(void)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ＳＭＰＣメモリ設定コマンドパラメータ設定
;		Prottype	: void slComPrmSetMemory(void)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	時刻設定コマンドパラメータ設定
;		Prottype	: void slComPrmSetTime(void)
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ＳＭＰＣコマンド発行
;		Prottype	: Bool slSendSmpcCommand(void*, Uint8)
;		Contents	: OK ... 成功
;				: NG ... 失敗
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	リセット系コマンド実行
;		Prottype	: Bool slExecBasicCommand(void*, Uint8)
;		Contents	: OK ... 成功
;				: NG ... 失敗
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	システム全体リセット実行
;		Prottype	: Bool slExecSystemReset(void*, Uint8)
;		Contents	: OK ... 成功
;				: NG ... 失敗
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	クロックチェンジ実行
;		Prottype	: Bool slExecClockChange(void*, Uint8)
;		Contents	: OK ... 成功
;				: NG ... 失敗
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ステータス取得実行
;		Prottype	: Bool slExecGetStatus(void*, Uint8)
;		Contents	: OK ... 成功
;				: NG ... 失敗
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ペリフェラル取得実行
;		Prottype	: Bool slExecGetPeripheral(void*, Uint8)
;		Contents	: OK ... 成功
;				: NG ... 失敗
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ＳＭＰＣメモリ設定実行
;		Prottype	: Bool slExecSetMemory(void*, Uint8)
;		Contents	: OK ... 成功
;				: NG ... 失敗
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	時刻設定実行
;		Prottype	: Bool slExecSetTime(void*, Uint8)
;		Contents	: OK ... 成功
;				: NG ... 失敗
;-------------------------------------------------------------------------------;

;-------------------------------------------------------------------------------;
;	ＳＭＰＣコマンドのリクエスト
;		Prottype	: Bool slRequestCommand(Uint8, Uint8)
;		Contents	: OK ... 成功
;				: NG ... 失敗
;-------------------------------------------------------------------------------;

