
�� ���Z���C�u�����y�сA�V�X�e�����C�u�����ɂ���

���C�u�����Ŏg�p���鐔�l�͈ȉ��̎g�p�Ɋ�Â��Ă��܂��B

�|�W�V�����A�O�p�֐����̌Œ菬���_�f�[�^ :
    ��ʂP�U�r�b�g���������A���ʂP�U�r�b�g���������̃g�[�^���R�Q�r�b�g(�����t��)
    �^����  FIXED

��)
    16.5 �� �\���ꍇ	:   0x0010_8000
			      ---- ----
				|    |__ ������
				|__ ������
    ���W�� ���E�������w��(�v���X�͉E)�A�㉺�������x��(�v���X�͉�)�A���s������
    �y��(�v���X�͉�)�ɂȂ�܂��B


�p�x :
    �R�U�O�x���P�U�r�b�g�ŕ\��
    �^����  ANGLE

��)
    90.0�K :  0x4000
    45.0�K :  0x2000
    22.5�K :  0x1000
    11.25�K:  0x0800

    ��]�s����쐬�����ꍇ�A�p�x�̃v���X�����͎��ɑ΂��ĉE��]�ɂȂ�܂��B

�s�� :
    ���l�� FIXED ���g�p�B�R���S�̍s��ŁA��������̔z�u�͈ȉ��̒ʂ�B
    M00 , M01 , M02 ,
    M10 , M11 , M12 ,
    M20 , M21 , M22 ,
    M30 , M31 , M32


�� �e���C�u�����֐��ɂ���

void slInitMatrix(void)
  �@�\ : �}�g���N�X���Z�Ŏg�p����ϐ��A�o�b�t�@�̏�����

Bool slPushMatrix(void)
  �@�\ : �}�g���N�X�X�^�b�N�̃|�C���^��i�߁A�J�����g�}�g���N�X������ɃR�s
	�[����B
	�}�g���N�X�͂Q�O�܂Ńl�X�g�ł��邪�A������I�[�o�[����ƃG���[��Ԃ��B

Bool slPushUnitMatrix(void)
  �@�\ : �}�g���N�X�X�^�b�N�̃|�C���^��i�߁A�����ɒP�ʍs����Z�b�g����B
	�l�X�g���������ꍇ�A�G���[��Ԃ��B

Bool slIncMatrixPtr(void)
  �@�\ : �}�g���N�X�X�^�b�N�̃|�C���^��i�߂�B
	�}�g���N�X�͂Q�O�܂Ńl�X�g�ł��邪�A������I�[�o�[����ƃG���[��Ԃ��B

Bool slPopMatrix(void)
Bool slDecMatrixPtr(void)
  �@�\ : �}�g���N�X�X�^�b�N�̃|�C���^���ЂƂ߂��B
	�߂��������ꍇ�A�G���[��Ԃ��B

void slUnitMatrix(MATRIX *mtptr)
  �@�\ : �w�肳�ꂽ�}�g���N�X��P�ʍs��ɂ���B�}�g���N�X�� CURRENT ���w��
	�����ꍇ�A�}�g���N�X�X�^�b�N�̃J�����g�}�g���N�X��Ώۂɂ���B

void slUnitAngle(MATRIX *mtptr)
  �@�\ : �}�g���N�X�̉�]����(�Rx�R)��P�ʍs��ɂ���B
	���s�ړ������͕ύX���Ȃ��B
	�}�g���N�X�� CURRENT ���w�肵���ꍇ�J�����g�}�g���N�X��ύX����B

void slUnitTranslate(MATRIX *mtptr)
  �@�\ : �}�g���N�X�̕��s�ړ��������O�ɂ���B
	��]�����͕ύX���Ȃ��B
	�}�g���N�X�� CURRENT ���w�肵���ꍇ�J�����g�}�g���N�X��ύX����B

void slLoadMatrix(MATRIX *mtptr)
  �@�\ : �J�����g�}�g���N�X�Ɏw�肳�ꂽ�}�g���N�X���R�s�[����B

Bool slCopyMatrix(void)
  �@�\ : �J�����g�}�g���N�X�ɂЂƂO�̃}�g���N�X���R�s�[����B
	�}�g���N�X���l�X�g����Ă��Ȃ��ꍇ�ɂ̓G���[��Ԃ��B

void slRegistMatrix(MATRIX *mtptr)
  �@�\ : �}�g���N�X�o�b�t�@�Ɏw�肳�ꂽ�}�g���N�X���R�s�[����B
	�}�g���N�X�� CURRENT ���w�肵���ꍇ�A�}�g���N�X�X�^�b�N�̃J�����g
	�}�g���N�X��Ώۂɂ���B

void slGetMatrix(MATRIX *mtptr)
  �@�\ : �J�����g�}�g���N�X���w�肳�ꂽ�}�g���N�X�ɃR�s�[����B

void slGetTranslate(FIXED *pbuf)
  �@�\ : �}�g���N�X���畽�s�ړ����������o���A�w�肳�ꂽ�o�b�t�@�ɃR�s�[����B

void slLoadTranslate(FIXED M30 , FIXED M31 , FIXED M32)
  �@�\  : �J�����g�}�g���N�X�̕��s�ړ������݂̂��X�V���܂��B

void slInversMatrix()
  �@�\ : �J�����g�}�g���N�X���t�s��ɂ���B

void slTransposeMatrix()
  �@�\ : �J�����g�}�g���N�X��]�u�s��ɂ���B

void slRotX(ANGLE angx)
  �@�\ : �J�����g�}�g���N�X�ɑ΂��A�w�����̉�]�s����|����B
    ��]�}�g���N�X��
	 �P.�O      �O.�O      �O.�O      �O.�O
	 �O.�O     ��������   ��������    �O.�O
	 �O.�O    -��������   ��������    �O.�O
	 �O.�O      �O.�O      �O.�O      �P.�O

void slRotXSC(FIXED sn , FIXED cs)
  �@�\ : �T�C���ƁA�R�T�C�����w�肵�āA�w�����̉�]������B
	 �P.�O      �O.�O      �O.�O      �O.�O
	 �O.�O      ����       ����       �O.�O
	 �O.�O     -����       ����       �O.�O
	 �O.�O      �O.�O      �O.�O      �P.�O

void slRotY(ANGLE angy)
  �@�\ : �J�����g�}�g���N�X�ɑ΂��A�x�����̉�]�s����|����B
	��������    �O.�O    -��������    �O.�O
	 �O.�O      �P.�O      �O.�O      �O.�O
	��������    �O.�O     ��������    �O.�O
	 �O.�O      �O.�O      �O.�O      �P.�O

void slRotYSC(FIXED sn , FIXED cs)
  �@�\ : �T�C���ƁA�R�T�C�����w�肵�āA�x�����̉�]������B
	 ����       �O.�O     -����       �O.�O
	 �O.�O      �P.�O      �O.�O      �O.�O
	 ����       �O.�O      ����       �O.�O
	 �O.�O      �O.�O      �O.�O      �P.�O      

void slRotZ(ANGLE angz)
  �@�\ : �J�����g�}�g���N�X�ɑ΂��A�y�����̉�]�s����|����B
	��������   ��������    �O.�O      �O.�O
       -��������   ��������    �O.�O      �O.�O
	 �O.�O      �O.�O      �P.�O      �O.�O
	 �O.�O      �O.�O      �O.�O      �P.�O

void slRotZSC(FIXED sn , FIXED cs)
  �@�\ : �T�C���ƁA�R�T�C�����w�肵�āA�y�����̉�]������B
	 ����       ����       �O.�O      �O.�O
        -����       ����       �O.�O      �O.�O
	 �O.�O      �O.�O      �P.�O      �O.�O
	 �O.�O      �O.�O      �O.�O      �P.�O

void slRotAX(FIXED vctX , FIXED vctY , FIXED vctZ , ANGLE A)
  �@�\ : ���_��ʂ�C�ӎ����̉�]������B���͒P�ʃx�N�g���Ŏw�肷��B
    �m���m��(�P-�b)+�b     �m���m��(�P-�b)+�m���r �m���m��(�P-�b)-�m���r  �O.�O
    �m���m��(�P-�b)-�m���r �m���m��(�P-�b)+�b     �m���m��(�P-�b)+�m���r  �O.�O
    �m���m��(�P-�b)+�m���r �m���m��(�P-�b)-�m���r �m���m��(�P-�b)+�b      �O.�O
    �O.�O                  �O.�O                  �O.�O                   �P.�O

    �m���A�m���A�m���� ����\���P�ʃx�N�g���̐����B
    �b �̓R�T�C�� �A�r �̓T�C�� ��\���B

void slTranslate(FIXED tx , FIXED ty , FIXED tz)
  �@�\ : �J�����g�}�g���N�X�ɑ΂��A���s�ړ����s���B
	 �O.�O      �O.�O      �O.�O      �O.�O
	 �O.�O      �O.�O      �O.�O      �O.�O
	 �O.�O      �O.�O      �O.�O      �O.�O
	 ����       ����       ����       �P.�O

void slRegistTranslate(FIXED tx , FIXED ty , FIXED tz)
  �@�\ : �}�g���N�X�o�b�t�@�ɑ΂��āA���s�ړ��������̂��A�J�����g�}�g���N�X
	�ɃR�s�[����B
	�������A�}�g���N�X�o�b�t�@�͕ύX����Ȃ��B

void slScale(FIXED sx , FIXED sy , FIXED sz)
  �@�\ : �J�����g�}�g���N�X�ɑ΂��ăX�P�[�����O����B
	 ����       �O.�O      �O.�O      �O.�O
	 �O.�O      ����       �O.�O      �O.�O
	 �O.�O      �O.�O      ����       �O.�O
	 �O.�O      �O.�O      �O.�O      �P.�O

void slMultiMatrix(MATRIX mtrx)
  �@�\ : �J�����g�}�g���N�X�Ɏw�肳�ꂽ�}�g���N�X���|����B

void slLookAt(FIXED camera[XYZ] , FIXED target[XYZ] , ANGLE angz)
  �@�\ : �J�����ʒu����ڕW����������}�g���N�X���J�����g�}�g���N�X�Ɋ|����B
	���̍ہA�y�����ɉ�]������B
  ���� : �x���ɉ����悤�ȕ����ł́A�w�y���ʏ�ł̃x�N�g�����������Ȃ�A����
	���v�Z�ł��Ȃ��ꍇ�����邩���B

FIXED slSin(ANGLE angs)
  �@�\ : �w�肳�ꂽ�p�x�ɑ΂���A�T�C����Ԃ��B
	�l�Ƃ��Ă� 0xffff0000 �` 0x00010000 �̒l�B
  ���� : �p�x�f�[�^�� ���ʂ̂S�r�b�g���̂āA0x0000 �` 0xfff0 �� �ϊ������
	���߁A���x�͂�◎����(�ȉ��p�x���g�p������͓̂��l�̐������󂯂�)�B

FIXED slCos(ANGLE angc)
  �@�\ : �w�肳�ꂽ�p�x�ɑ΂���A�R�T�C����Ԃ��B
	�l�Ƃ��Ă� 0xffff0000 �` 0x00010000 �̒l�B

FIXED slTan(ANGLE angt)
  �@�\ : �w�肳�ꂽ�p�x�ɑ΂���A�^���W�F���g��Ԃ��B
  ���� : �X�O�x�t�߂ł̓^���W�F���g�̒l���傫�߂��āA���x�͂��Ȃ�������B

ANGLE slAtan(FIXED tx , FIXED ty)
  �@�\ : �w�肳�ꂽ�����̊p�x��Ԃ��B

Uint16 slSquart(Uint32 sqrt)
  �@�\ : �������������̕��������Z�o����B

FIXED slSquartFX(FIXED sqrtfx)
  �@�\ : ���������Œ菬���_���̕��������Z�o����B
  ���� : �����Ƃ��ĉ��Z���Ă��邽�߁A���ʂ̐��x�͂W�r�b�g�����A�W�r�b�g����
	�ƂȂ�B

FIXED slMulFX(FIXED a,FIXED b)
  �@�\ : �Œ菬�����m�̊|���Z�����A���ʂ�Ԃ��B

FIXED slDivFX(FIXED a,FIXED b)
  �@�\ : �Œ菬�����m�̊���Z�����A����(b/a)��Ԃ��B

FIXED slInnerProduct(VECTOR vct1,VECTOR vct2)
  �@�\ : ��̃x�N�g���̓��ς����A���ʂ�Ԃ��B

void slNormalVector(VECTOR a , b , c , ans)
  �@�\ : �w�肳�ꂽ�R�_����Ȃ�Q�{�̃x�N�g��(b->a , b->c)�ɒ�������x�N�g��
	(�P�ʖ@���x�N�g��)���Z�o���܂��B
	�@���̌������t�ɂ������ꍇ�ɂ͎w�肷��_�� b , a , c �̏��ɂ��ĉ������B

FIXED slRandom()
  �@�\ : �O����P.�O�̊Ԃ̗����𔭐�����B

void slBezier(VECTOR p0 , VECTOR p1 , VECTOR p2 , VECTOR p3 ,
		FIXED timming , VECTOR ans)
  �@�\ : �w�肳�ꂽ�S�_�Ԃ����Ԃa�����������Ȑ��� timming �ł̈ʒu��Ԃ��B
	timming �� �O����P.�O�͈̔͂Ŏw�肷��B

FIXED slBallCollision(FIXED object1[XYZ] , FIXED size1
			, FIXED object2[XYZ] , FIXED size2)
  �@�\ : �ʒu�� object[XYZ] �A���a�� size1 �̋��� object2[XYZ],size2 �̋��Ƃ�
	�����蔻����s���A�������Ă���΂��̋�����Ԃ��B
	�������Ă��Ȃ��ꍇ�ɂ� �}�C�i�X�̒l��Ԃ��B

FIXED slCheckOnScreen(FIXED object[XYZ] , FIXED size)
  �@�\ : �w�肳�ꂽ�I�u�W�F�N�g�̃|�W�V�������J�����g�}�g���N�X��ʂ��ĕϊ����A
	���̈ʒu�Ŏw�肳�ꂽ�T�C�Y�̕��̂���ʂɕ\������邩���e�X�g���A���ʂ��
	���܂��B
	�X�N���[��������O�̏ꍇ�ɂ� �|�P(FFFFFFFF)�A�㉺���E�ɏo�Ă���ꍇ�ɂ�
	�|�Q(FFFFFFFE)�A��ʓ��̏ꍇ�ɂ͂y�|�W�V������Ԃ��܂��B

FIXED slCheckOnScreen0(FIXED size)
  �@�\ : �|�W�V����(�O,�O,�O)�ɂ���I�u�W�F�N�g���w�肳�ꂽ�T�C�Y�ŉ�ʂɕ\������
	�邩���e�X�g���A���ʂ�Ԃ��܂��B
	�X�N���[��������O�̏ꍇ�ɂ� �|�P(FFFFFFFF)�A�㉺���E�ɏo�Ă���ꍇ�ɂ�
	�|�Q(FFFFFFFE)�A��ʓ��̏ꍇ�ɂ͂y�|�W�V������Ԃ��܂��B

void slCalcPoint(FIXED cx , FIXED cy , FIXED cz , FIXED ans[XYZ])
  �@�\ : �w�肳�ꂽ�|�C���g���J�����g�}�g���N�X�ō��W�ϊ��������ʂ��o�b�t�@�ɕԂ�
	 �܂��B

void slSlaveFunc(void (*func)() , void *par)
  �@�\ : �X���[�u�b�o�t�Ɏw�肳�ꂽ�֐������s������B
	 �|���S���\�����̃t�@���N�V�������X���[�u�ւ̃R�}���h�o�b�t�@��Ɏc���Ă���
	 �ꍇ�A����炪�I�����Ȃ��Ƃ��̃t�@���N�V�����͎��s����Ȃ����߁A���s�J�n��
	 �x��邱�Ƃ�����܂��B

void slSetTrayCheck(Bool switch)
  �폜����܂����B

FIXED  slConvert3Dto2D( FIXED pos[XYZ], Sint32 ans[XY])
  �@�\ : �J�����g�}�g���N�X���g�p���āA3D���΍��Wpos������ۉ�ʏ�ɕ\������ۂ�
	��ʍ��W�lans��Ԃ��܂��B�֐��l�Ƃ��āAZ�l��Ԃ��܂��B
