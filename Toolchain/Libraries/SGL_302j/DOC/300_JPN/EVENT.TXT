
�� �C�x���g�R���g���[���֌W�̊֐��ɂ���

void slInitEvent(void)
   �@�\ : �C�x���g�A���[�N�Ǘ��p�̃o�b�t�@������������B�C�x���g�͂U�S�A
	  ���[�N�͂Q�T�U���p�ӂ����B
   ���� : �C�x���g�A���[�N�p�̂q�`�l���̂͏���������Ȃ��̂ŁA�̈�����o
	  �������ɁA���[�U�[�v���O���������������邱�ƁB

EVENT *slGetEvent(void)
   �@�\ : �C�x���g�p�Ɋ���t����ꂽ�q�`�l�̈�����o���A���̃|�C���^���
	  ���B
   ���� : �P�Q�W�o�C�g�̗̈�ŁA���[�U�[�����R�Ɏg�p�ł���B
	  �U�S���p�ӂ���Ă��邪�A�g���؂��Ă���ꍇ�ɂ� �m�t�k�k �R�[�h
	  ��Ԃ��B

EVENT *slSetEvent(void (*func)())
   �@�\ : �C�x���g�����o���A���s���X�g�̖����ɒǉ�����B���̍ہA�w�肳��
	  ���֐������s�֐��Ƃ��ēo�^����B
   ���� : �P�Q�W�o�C�g�̗̈�ł��邪�A�擪�̂P�U�o�C�g�̓V�X�e���ɂ��g�p
	  �����B
	  �C�x���g���c���Ă��Ȃ��ꍇ�ɂ� �m�t�k�k �R�[�h��Ԃ��B

EVENT *slSetEventNext(EVENT *evptr , void (*func)())
   �@�\ : �C�x���g�����o���A�w�肳�ꂽ�C�x���g�̎��Ɏ��s�����悤�ɁA��
	  �s���X�g�ɒǉ�����B���̍ہA�w�肳�ꂽ�֐������s�֐��Ƃ��ēo�^��
	  ��B
   ���� : �P�Q�W�o�C�g�̗̈�ł��邪�A�擪�̂P�U�o�C�g�̓V�X�e���ɂ��g�p
	  �����B
	  �C�x���g���c���Ă��Ȃ��ꍇ�ɂ� �m�t�k�k �R�[�h��Ԃ��B

void slReturnEvent(EVENT *evptr)
   �@�\ : ���s���X�g�ɓo�^����Ă��Ȃ��C�x���g���V�X�e���ɕԂ��B
   ���� : ���s���X�g�ɓo�^����Ă���C�x���g�ɑ΂��āA���̊֐������s�����
	  ���X�g�ɓo�^���ꂽ�܂܂ɂȂ邽�߁A���s�͌p�������B
	  �߂��ꂽ�|�C���^�̓V�X�e���̃o�b�t�@�ɍēo�^����邪�A���̍ۂɓo
	  �^�ς݂ł����Ă��`�F�b�N����Ȃ��̂ŁA�����|�C���^�𕡐���ԋp��
	  ��ƁA���̌���s����� slGetEvent(),slSetEvent(),slSetEventNext()
	  �ɂ����ĕs�����������B

void slCloseEvent(EVENT *evptr)
   �@�\ : ���s���X�g�ɓo�^���ꂽ�C�x���g�����X�g����؂藣���A�V�X�e���ɕ�
	  ���B�܂��A���[�N���Z�b�g����Ă���ꍇ�A�������߂��B
   ���� : ���s���X�g�ɓo�^����Ă��Ȃ��C�x���g���w�肷��ƁA���X�g��񂪐�
	  �����Ȃ����߁A�s���ȃC�x���g�ɑ΂��āA���X�g�ύX���������邱�Ƃ�
	  �Ȃ�A�\���ł��Ȃ��A�h���X�ɑ΂��鏑�����݂��������A�ň��̏ꍇ�A
	  �b�o�t����~����ꍇ������B
	  �߂��ꂽ�|�C���^�̓V�X�e���̃o�b�t�@�ɍēo�^����邪�A���̍ۂɓo
	  �^�ς݂ł����Ă��`�F�b�N����Ȃ��̂ŁA�����|�C���^�𕡐���ԋp��
	  ��ƁA���̌���s����� slGetEvent(),slSetEvent(),slSetEventNext()
	  �ɂ����ĕs�����������B

void slExecuteEvent(void)
   �@�\ : ���s���X�g�ɓo�^���ꂽ�C�x���g��擪���珇�Ɏ��s����B
   ���� : ���C�����[�v���ƂɎ��s����B

WORK *slGetWork(void)
   �@�\ : ���[�N�p�Ɋ���t����ꂽ�q�`�l�̈�����o���A���̃|�C���^��Ԃ��B
   ���� : ���[�N�͂U�S�o�C�g�̗̈�ŁA�擪�̂S�o�C�g�����X�g�p�̃|�C���^��
	  ���āA�V�X�e���Ŏg�p����B�c��̂U�O�o�C�g�̓��[�U�[�����R�Ɏg�p
	  �ł���B
	  �d�u�d�m�s �\���̂� �v�n�q�j �� �|�C���^���Z�b�g���Ă���΃C�x��
	  �g���N���[�Y����ꍇ�ɁA�V�X�e���ɕԋp�����B

void slReturnWork(WORK *wkptr)
   �@�\ : ���[�N�Ƃ��Ďg�p���Ă����q�`�l�̈���V�X�e���ɖ߂��B
   ���� : �߂��ꂽ�|�C���^�̓V�X�e���̃o�b�t�@�ɍēo�^����邪�A���̍ۂɓo
	  �^�ς݂ł����Ă��`�F�b�N����Ȃ��̂ŁA�����|�C���^�𕡐���ԋp��
	  ��ƁA���̌�Ɏ��s����� slGetWork() �ɂ����ĕs�����������B


�� �C�x���g�̓o�^�Ǝ��s�ɂ���

  slInitEvent() �����s�������ɂ͎��s���X�g�̓N���A����܂��̂ŁA���s������
  �C�x���g�����X�g�ɓo�^���Ȃ���΂Ȃ�܂���B
  �C�x���g�̓o�^�ɂ� slSetEvent() ���邢�� slSetEventNext() ���g�p���܂��B

    void *eventtbl[] = {
	init_camera ,
	init_player1 ,
	init_player2 ,
	init_enemyctrl
    } ;

    void InitGame(){
	void  **evrdptr ;
	EVENT  *evptr ;
	int	cnt ;

	slInitEvent() ;		/* �C�x���g�Ǘ��p�ϐ��̏����� */
	evrptr = eventtbl ;
	for(cnt = sizeof(eventtbl) / sizeof(void *) ; cnt-- > 0 ;){
	    evptr = slSetEvent(*evrptr++) ;
	}
	slInitPolygon(TV_320x224) ;
    }

    void Game(){
	slExecuteEvent() ;	/* �C�x���g�̎��s */
	slSynch() ;		/* �|���S���f�[�^�̏o�͂ƃr�f�I�\������ */
    }

  �C�x���g�� slExecuteEvent() �֐����Ăяo�����ƂɎ��s����܂��B
  �e�C�x���g�͊�{�I�ɁA�o�^���ꂽ���Ɏ��s����܂��B
  �͂��߂ɓo�^���ꂽ�C�x���g�� �V�X�e���� EventTop �ϐ��ɒ�`����A�����
  �N�_�Ƃ��āA�C�x���g�̃|�C���^������ EventNow �ϐ��ɒ�`���Ȃ���A�e�C�x
  ���g�̏����֐����Ăяo���܂��B�����֐��͈ȉ��̌`���Œ�`���Ă����܂��B

  void function(EVENT *evptr){
	...		/* �C�x���g���� */
  }

  �A�Z���u������ŏ����ꍇ�ɂ�

  _function:
	...		; �C�x���g����
			; �C�x���g�̃|�C���^�� r�S���W�X�^�ɃZ�b�g����Ă���
	rts
	nop

  �ЂƂ̃C�x���g���I���ƁA���̃C�x���g�̍\���̂ɂ��� next �|�C���^��
  EventNow �ϐ��ɓ���A���l�ɏ����֐��Ɏ��s���ڂ��܂��B������ next �|�C���^
  �� �m�t�k�k �ƂȂ�܂ŌJ��Ԃ���܂��B

  EventTop: ----+
	 	|
	 	|    +------------------+
	 	+--> | *work = NULL	|
		     | *before = NULL	|
		+--  | *next		|
		|    | *exad()		|
		|    |  user[]		|
		|    +------------------+
		|
		|    +------------------+	+------------------+
		+--> | *work		|  ---> | *next		   | -+
		     | *before		|	|		   |  |
		+--  | *next		|	|		   |  |
		|    | *exad()		|	+------------------+  |
		|    |  user[]		|   +-------------------------+
		|    +------------------+   |
		|			    |	+------------------+
		|    +------------------+   +-> | *next = NULL     | 
  EventLast: ---+--> | *work		|	|		   |
		     | *before		|	|		   |
		     | *next = NULL	|	+------------------+
		     | *exad()		|
		     |  user[]		|
		     +------------------+

  EventLast �ϐ��ɂ͍Ō�Ɏ��s�����C�x���g�̃|�C���^����`����Ă���A�C�x
  ���g��ǉ�����ۂɎg�p����܂��B
  ���[�U�[���q�`�l���g�p����ɂ́A���[�U�[�p�ɍ\���̂��`���A�C�x���g�q�`�l
  �� user[] �� ���̍\���̂� cast ���܂��B

  ��)
    typedef struct rob{
	FIXED  posX , posY , posZ ;
	ANGLE  angX , angY , angZ ;
	PDATA *pat ;
    } ROBOT ;		/* ���̍\���̂͂P�P�Q�o�C�g���z���Ȃ��l�ɂ��邱�� */

    void rob_control(EVENT *evptr){
	ROBOT *rbptr ;

	rbptr = (ROBOT *)evptr->user ;
	rbptr->posX = to_fixed(0) ;
	rbptr->posY = to_fixed(0) ;
	rbptr->posZ = to_fixed(0) ;
	rbptr->pat = &PD_Robot ;
    }

  ���[�N�̓|�C���^�̃��X�g�ɂ��Ȃ��Ď����Ƃ��ł��܂��B
  �ЂƂ̃C�x���g�ŕ����̃L�����N�^�𓮂����ꍇ�ɂ̓��[�N���g�p���āA�q�`�l
  ���m�ۂ��܂��B

    typedef struct road{
	struct road *next ;
	FIXED  posX , posY , posZ ;
	PDATA *pat ;
    } ROAD ;

    typedef struct rdat{
	Sint16 px , py , pz ;
	Uint16 pn ;
    } ROAD_DAT ;

    ROAD_DAT roadtbl[] = {
	{   0 ,   0 ,   0 , PN_ROAD} ,
	{   0 ,   0 , 100 , PN_ROAD} ,
	{   0 ,   0 , 200 , PN_ROAD}
    } ;

    void InitRoadControl(EVENT *evptr){
	WORK  *wkptr ;
	ROAD  *rdptr ;
	ROAD_DAT *rdtptr ;
	int    cnt ;

	rdptr = (ROAD *)evptr ;
	rdtptr = roadtbl ;
	for(cnt = sizeof(roadtbl) / sizeof(ROAD_DAT) ; cnt-- > 0 ;){
	    if((wkptr = slGetWork()) == NULL){
		break ;
	    }
	    rdptr->next = (ROAD *)wkptr ;	/* �ЂƂ߂̃|�C���^�� */
						/* �C�x���g�� work �ɓ��� */
	    rdptr = (ROAD *)wkptr ;
	    rdptr->posX = rdtptr->px << 16 ;	/* �|�W�V���� */
	    rdptr->posY = rdtptr->py << 16 ;
	    rdptr->posZ = rdtptr->pz << 16 ;
	    rdptr->pat = pattbl[rdptr->pn] ;	/* �p�^�[���f�[�^ */
	    rdtptr++ ;
	}
	rdptr->next = NULL ;			/* End mark */
	evptr->exad = (void *)RoadControl ;
    }
