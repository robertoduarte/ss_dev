
�� �X�v���C�g�A�y�у|���S���Ɋւ���֐��ɂ���

Bool slWindow(Sint16 Left,Sint16 Top,Sint16 Right,Sint16 Bottom,Uint16 Zlimit,
		Sint16 CentX,Sint16 CentY)

  �@�\ : �X�v���C�g�A�y�у|���S���̕\���𐧌�����͈͂�ݒ肵�܂��B
	 �\���͈͂� TV ��ʏ�ł̈ʒu�ŁA�\�����ɂQ��܂Ŏw��ł��܂��B
	 Zlimit �� ������悪�\������Ȃ��Ȃ�܂��B
	 CentX , CentY �� �|���S���ł͏����_�̈ʒu�A�X�v���C�g�ł͍��W���_��
	 �Ȃ�܂��B
	 ��ʏ�ł̈ʒu�͍��オ(�O,�O)�A�E����(�R�P�X,�Q�Q�R) <�ʏ��ʃT�C�Y>
	 �ł��B

  ���� : slWindow() �� �ĂԑO�� slPutPolygon() , slPutSprite() ���̃X�v���C�g
	 ���Z�b�g����֐����g�p����ƁA�����ɂ͑S��ʃT�C�Y�̃E�B���h�E���g
	 �p����A���߂ČĂ΂ꂽ slWindow() �Őݒ肳���E�B���h�E����ڂɂ�
	 ��܂��B
	 �ʏ��
		slWindow(...) ;		/* Window 1 */
		    ...
		  slPutPolygon(...) ;
		  slPutSprite(...) ;
		    ...
		slWindow(...) ;		/* Window 2 */
		    ...
		  slPutSprite(...) ;
		  slPutPolygon(...) ;

	 �̂悤�ɁA�����̂͂��߂ɃE�B���h�E���Z�b�g���A�ؑւ��������ł�����x
	 �ʂ̃E�B���h�E���Z�b�g����悤�ɂ��܂��B


void slPerspective(ANGLE pers)
  �@�\ : �����ϊ������鎞�Ɏg�p���� �X�N���[���܂ł̋����萔��ݒ肵�܂��B
	 ��]�X�N���[���̉�]���S�y�ʒu���ݒ肵�܂��B
	 ��p�̓X�N���[���̉���(�E�B���h�E�̃T�C�Y�ł͂Ȃ�)�Ɏ��삪����p�x��
	 ���Ďg�p���܂��B

void slLight(VECTOR light)
  �@�\ : �����̕�����ݒ肵�܂��B
  ���� : �����͕��s�����ŁA�����݂̂�\���܂����A�x�N�g���͒P�ʃx�N�g���łȂ�
	 ��΂����܂���B�傫�����P���z�����ꍇ�A�I�[�o�[�t���[���܂��̂ŁA��
	 �����\���ł��܂���(�������ȃJ���[�ŕ\������܂�)�B
	 �܂��A���f����\������Ƃ��� slScale() ���g�p���Ă���� �@�������l��
	 �X�P�[�����O����Ă��܂����߁A�I�[�o�[�t���[���Ă��܂��ꍇ������܂�
	 �̂ŁA�X�P�[�����O���Ȃ��悤�ɂ��ĉ������B

Bool slZdspLevel(Uint16 level)
  �@�\ : �X�N���[��������O�ɂ���|���S��(���邢�̓X�v���C�g�f�[�^)���ǂ���
	�ŕ\������̂���؂�ւ��܂��B
	level �͂P�A�Q�A�R�̂����ꂩ�ŁA����ȊO�̓G���[�ɂȂ�܂��B
	�P: �X�N���[���܂ł̋����̂P/�Q�܂ł�\���͈͂ɂ��܂�(default)�B
	�Q: �X�N���[���܂ł̋����̂P/�S�܂ł�\���͈͂ɂ��܂��B
	�R: �X�N���[���܂ł̋����̂P/�W�܂ł�\���͈͂ɂ��܂��B
	���x����؂�ւ���Ƃ���ȍ~�ɕ\������|���S��(���邢�̓X�v���C�g)��
	�΂��āAslWindow �Ŏw�肵��Zlimit�̊�ʒu�����l�ɕω����܂��̂ŁA��
	�ӂ��ĉ������B

Bool slPutPolygon(PDATA *pat)
  �@�\ : �J�����g�}�g���N�X���g�p���ė^����ꂽ�|���S�����f������]�E���s�ړ�
	 ���A�����ϊ����s�Ȃ��A�|���S���y�сA�ό`�X�v���C�g�Ƃ��ĕ\�����܂��B

Bool slPutPolygonS(PDATA *pat)
  �@�\ : �J�����g�}�g���N�X���g�p���ė^����ꂽ�|���S�����f������]�E���s�ړ�
	 ���A�����ϊ����s�Ȃ��A�|���S���y�сA�ό`�X�v���C�g�Ƃ��ĕ\�����܂��B
  ���� : ��L�� slPutPolygon() �֐��ł́A�X���[�u�b�o�t�̏󋵂ɉ����ď�����
	 ���S���A�}�X�^�[�b�o�t�ƕ�����s���܂����A�{�֐��ł́A�S�Ă��X���[�u
	 �b�o�t�����s���܂��B

Bool slDispSprite(FIXED pos[XYZS] , ATTR *atrb , ANGLE Zrot)
  �@�\ : �|�W�V�����A�X�P�[���A��]�p���w�肵�A�X�v���C�g��\�����܂��B
	 slPutPolygon() �Ɠ��l Z�l�ɂ��\�[�e�B���O�����܂��B
	 �X�P�[���Ƀ}�C�i�X�̒l���w�肵���ꍇ�A�y�|�W�V�����ɂ��X�P�[�����Z
	 �o���A�X�P�[���̕␔���|���A�\���p�̃X�P�[���Ƃ��܂��B
	 �Ⴆ�΁A�X�P�[���Ɂ|�Q.�O���w�肵���ꍇ�A�O.�T�{�ŕ\�������悤�Ȉ�
	 �u(�y�|�W�V����)�ɂ���΁A�P.�O�{�ɂȂ��ĕ\������܂��B

Bool slDispSpriteHV(FIXED pos[XYZSS] , ATTR *atrb , ANGLE Zrot)
  �@�\ : �c�A���̕\���X�P�[�����w�肵�āA�ό`�X�v���C�g��\�����܂��B
	 ��L�� slDispSprite() �֐��ƈقȂ�A�X�P�[���Ƀ}�C�i�X���w�肵���ꍇ
	 �L�����N�^�[�͔��]���ĕ\������܂��B

Bool slDispSpriteSZ(FIXED pos[XYZSS] , ATTR *atrb , ANGLE Zrot)
  �@�\ : �c�A���̕\���T�C�Y���w�肵�āA�ό`�X�v���C�g��\�����܂��B
	 �T�C�Y�Ƀ}�C�i�X���w�肳�ꂽ�ꍇ�ɂ́A���]���ĕ\������܂��B

Bool slDispSprite4P(FIXED pos[4][XY] , FIXED zpos , SPR_ATTR *atrb)
  �@�\ : ��ʏ�̂S�_���w�肵�āA�ό`�X�v���C�g��\�����܂��B
	 �S�_�̓E�B���h�E���S�ɑ΂���I�t�Z�b�g�ʒu�Ŏw�肵�A�S�̂��\����
	 �y�ʒu��ʂɎw�肵�܂��B
	 �S�_�͍���A�E��A�E���A�����̏�(���v���)�Ŏw�肵�܂��B

Bool slPutSprite(FIXED pos[XYZS] , ATTR *atrb , ANGLE Zrot)
  �@�\ : �J�����g�}�g���N�X���g�p���ă|�W�V�������Z�o���A�����ϊ��ɍ��킹�ăX
	 �P�[�����O���ꂽ�X�v���C�g��\�����܂��B
	 ��L�� slDispSprite() �Ɠ����悤�� �w�肳�ꂽ�X�P�[���{����܂����A
	 �}�C�i�X���w�肵���ꍇ�A�������]���ăX�P�[�����O����܂��B

Bool slSetSprite(SPRITE parms[] , FIXED Zpos)
  �@�\ : �n�[�h�E�G�A�ɓn���X�v���C�g�R���g���[���R�}���h�f�[�^��]�����X�g��
	 �Z�b�g���܂��B
	 ���C�u�����֐��ł͍쐬�ł��Ȃ��悤�ȕό`�X�v���C�g��A����̃X�v���C
	 �g�ɂ̂݉e������E�B���h�E�̐ݒ���������ꍇ�ȂǂɎg�p���܂��B

Bool slDispPolygon(PDATA *pat , Uint16 mode)
  �@�\ : �J�����g�}�g���N�X���g�p���ė^����ꂽ�|���S�����f������]�E���s�ړ�
	 ���A�����e�̂܂܁A�|���S���y�сA�ό`�X�v���C�g��\�����܂��B
	 �������A�����v�Z�A�N���b�s���O���̃I�v�V�����͎g�p�ł��܂���B
	 mode �� �A�g���r���[�g�𑍂Ẵ|���S�������L���邩�ǂ����̃t���O�ŁA
	 �O�̎��A�A�g���r���[�g�e�[�u���̐擪�̃f�[�^�ŁA�e�|���S�����\������
	 �܂��B����ȊO�̏ꍇ�ɂ͎w�肳�ꂽ�A�g���r���[�g�f�[�^�ŕ\������܂��B

Bool slPutObject(OBJECT *objptr)
  �@�\ : �w�肳�ꂽ�I�u�W�F�N�g�\���̂Ŏw�肳�ꂽ���s�ړ��A��]�A�X�P�[�����O
	 ���s�Ȃ��A�|���S�����f����\�����܂��B�{�֐��͈ȉ��̊֐������s������
	 �̂Ɠ������ʂƂȂ�܂��B

    void slPutObject(OBJECT *objptr){
	slTranslate(objptr->pos[X] , objptr->pos[Y] , objptr->pos[Z]) ;
	slRotZ(objptr->ang[Z]) ;
	slRotY(objptr->ang[Y]) ;
	slRotX(objptr->ang[X]) ;
	slScale(objptr->scl[X] , objptr->scl[Y] , objptr->scl[Z]) ;
	if(objptr->pat != NULL){
	    slPutPolygon(objptr->pat) ;
	}
    }

  ���� : �{�֐��̓J�����g�}�g���N�X��ύX���܂��̂ŁA�K�v�ɉ�����slPushMatrix()
	 �֐������s���ă}�g���N�X�̑ޔ����s�Ȃ��ĉ������B
	 �܂��A�I�u�W�F�N�g�̐e�q�֌W�ɂ��Ă̓��[�U�[�֐��őΉ����ĉ������B

  �e�q�\���ɂ����������\���̃T���v���v���O����

	void PutAll(OBJECT* obptr){
	    slPushMatrix() ;			/* �e�̃}�g���N�X��ޔ� */
	    {
		slPutObject(obptr) ;		/* �I�u�W�F�N�g�̕\�� */
		if(obptr->child != NULL){
		    PutAll(obptr->child) ;	/* �q������Ε\�� */
		}
	    }
	    slPopMatrix() ;

	    if(obptr->sibling != NULL){
		PutAll(obptr->sibling) ;	/* �Z��I�u�W�F�N�g�̕\�� */
	    }
	}

void slCurWindow(Uint8 win)
  �@�\ : �\������E�B���h�E��؂�ւ��܂��B
	 win �ɂ� winFar (����) , winNear (��O��) �̂����ꂩ���w�肵�܂��B
	 �{�֐������s����ƁA�X�N���[���ʒu�A�\���̈悪�ݒ肳��܂����A
	 �����x�N�g���͕ύX����܂���̂ŁA���ӂ��ĉ������B

Uint8 slSprWinNum()
  �@�\ : �\���Ɏg�p����Ă���E�B���h�E�ԍ���Ԃ��܂��B

void slFrameClipSize(Sint16 xsz , Sint16 ysz)
  �@�\ : �X�v���C�g�\���֐�[ slDispSprite() , slPutSprite()] �ƁAUseClip �I
	 �v�V�������w�肵���|���S����\������͈͂�ݒ肵�܂��B
	 �E�B���h�E�T�C�Y�ɑ΂��A�㉺���E�ɂ��ꂼ��w�肳�ꂽ�����������̈�
	 ����O�ꂽ�_�ɑ΂���\���Ƃ��܂��B

void slSetScreenDist(FIXED dist)
  �@�\ : �����ϊ������鎞�Ɏg�p���� �X�N���[���܂ł̋����萔��ݒ肵�܂��B
	 ��]�X�N���[���̉�]���S�y�ʒu���ݒ肵�܂��B

void slGetFrameData(void* dst , Uint16 xsz , Uint16 ysz)
  �@�\ : �t���[���o�b�t�@�̓��e(�P��ʕ�)��ǂݏo���A�w�肳�ꂽ�T�C�Y��
	 �X�P�[�����O(�Ԉ���)���ăZ�b�g���܂��B
	 �S�h�b�g�P�ʂŏ������Ă���̂ŁA�w�T�C�Y�͂S�̔{���Ƃ��܂��B
	 �o�b�t�@�ɂ͒�𑜓x�̏ꍇ�Q�o�C�g/�h�b�g�A���𑜓x�̏ꍇ�P�o�C�g/
	 �h�b�g�ŁA�������݂܂��B
	 �ǂݏo�����f�[�^���X�v���C�g�Ƃ��ĕ\���������ꍇ�ɂ́A
    ��𑜓x:
	slSpriteColMode(SPR_PAL_RGB) ;	/* default */
    �Ƃ��A
	SPR_ATTRIBUTE(PN_???,No_Palet,No_Gouraud,SPdis|ECdis|CL32KRGB,sprNoflip) ;
    �Ƃ������A�g���r���[�g�ŃX�v���C�g�\���֐������s���܂��B

    ���𑜓x�̏ꍇ�ɂ�
	slSpriteColMode(SPR_PAL) ;

	SPR_ATTRIBUTE(PN_???,No_Palet,No_Gouraud,SPdis|ECdis|CL256Bnk,sprNoflip) ;
    �̃A�g���r���[�g�ŕ\�������܂��B

  ���� : ���̊֐��ł͂u�c�o�P�̕`��I����҂��A�t���[���o�b�t�@���΂��ǂ�
	 ���āA�o�b�t�@�ɃZ�b�g���Ă��܂��B�t���[���o�b�t�@�̓ǂݏo���ɂ͂�
	 �Ȃ�̃E�F�C�g�����邽�߁A�R�Q���Q�S(=�V�U�W)�h�b�g�łT��������.��
	 �x�̎��Ԃ�������̂ŁA�������Ԃɒ��ӂ��Ďg�p���ĉ������B
	 �ǂݍ��ރo�b�t�@�����[�N��ɂƂ�A�u�����L���O�łu�q�`�l�ɓ]������
	 �����A���ڂu�q�`�l�ɓW�J������̓E�F�C�g�����Ȃ��悤�ł��B


�� �|���S���̃f�[�^�ɂ���

  slPutPolygon() �Ŏg�p����|���S���f�[�^�͈ȉ��̃t�H�[�}�b�g�ɂȂ��Ă��܂��B

    .data.l	point_tbl	; ���_���W�̃e�[�u��
    .data.l	NbPoint		; �v�Z�����钸�_�̐�
    .data.l	polygon_tbl	; �e�|���S���̖@���x�N�g���ƒ��_�ԍ��̃e�[�u��
    .data.l	NbPolygon	; �v�Z������|���S���̐�
    .data.l	attribute_tbl	; �e�|���S���̃A�g���r���[�g�̃e�[�u��

point_tbl:
    .data.l	X,Y,Z		; ���_�ԍ��O�̍��W�f�[�^
    .data.l	X,Y,Z		; ���_�ԍ��P�̍��W�f�[�^
	...
    .data.l	X,Y,Z		; ���_�ԍ� NbPoint - 1 �̍��W�f�[�^

    �b����Ńe�[�u�����쐬����ꍇ�APOINT�^���錾����Ă���APOStoFIXED
    �}�N�����g�p���邱�ƂŁA��L�̃f�[�^�e�[�u�����쐬���邱�Ƃ��ł��܂��B
  ��)
	static POINT point_CUBE[] = {
	    POStoFIXED(-80,-80,-80) ,
	    POStoFIXED( 80,-80,-80) ,
	    POStoFIXED( 80, 80,-80) ,
	    POStoFIXED(-80, 80,-80) ,

	    POStoFIXED( 80,-80, 80) ,
	    POStoFIXED(-80,-80, 80) ,
	    POStoFIXED(-80, 80, 80) ,
	    POStoFIXED( 80, 80, 80)
	} ;

polygon_tbl:
    .data.l	Nx,Ny,Nz	; �|���S���ԍ��O�̖@���x�N�g��
    .data.w	P0,P1,P2,P3	; �|���S���ԍ��O�Ŏg�p���钸�_�̔ԍ�
	(�O�p�`�̃|���S���̏ꍇ�AP2 �� P3 �������ԍ��ɂȂ�)
	...
    .data.l	Nx,Ny,Nz	; �|���S���ԍ� NbPolygon - 1 �̖@���x�N�g��
    .data.w	P0,P1,P2,P3	; �|���S���ԍ� NbPolygon - 1 �Ŏg�p���钸�_��
				; �ԍ�

    �b����Ńe�[�u�����쐬����ꍇ�APOLYGON�^���錾����Ă���APOStoFIXED
    �}�N�����g�p���邱�ƂŁA��L�̃f�[�^�e�[�u�����쐬���邱�Ƃ��ł��܂��B
  ��)
	static POLYGON polygon_CUBE[] = {
	    {POStoFIXED( 0 , 0 ,-1) , { 0 , 1 , 2 , 3}} ,
		|__ |__
	    {POStoFIXED( 1 , 0 , 0) , { 1 , 4 , 7 , 2}} ,
	    {POStoFIXED(-1 , 0 , 0) , { 5 , 0 , 3 , 6}} ,
	    {POStoFIXED( 0 ,-1 , 0) , { 4 , 1 , 0 , 5}} ,
	    {POStoFIXED( 0 , 1 , 0) , { 2 , 7 , 6 , 3}} ,
	    {POStoFIXED( 0 , 0 , 1) , { 4 , 5 , 6 , 7}} ,
	} ;

attribute_tbl:
    .data.b	RevCheck	; �\������ɂ�藠���ɂȂ����ʂ�\�����邩�ǂ�
				  ���̃t���O
			SinglePlane �� DualPlane �̂����ꂩ���w�肵�܂��B
    .data.b	SortMode	; �\�[�e�B���O�̊�ɂ���ʒu�̎Z�o���@�ƃI�v
				  �V�����@�\�̎g�p��錾���܂��B
			SortCen , SortMin , SortMax , SortBfr �� �����ꂩ
	SortCen : �w�肳�ꂽ�S�_�̂y�ʒu�̕��ς��\�[�e�B���O�̊�Ɏg�p���܂�
	SortMin : �S�_�̓��A�ł��������y�ʒu���g�p���܂�
	SortMax : �S�_�̓��A�ł��傫���y�ʒu���g�p���܂�
	SortBfr : ���O�ɕ\�����ꂽ�|���S���̂y�ʒu���g�p���܂�
		  ���O�̃|���S���̏�Ɏ�O�ɕ\������܂�
			�I�v�V�����͂����ɉ����Ďw�肵�܂�
			UseTexture , UseLight , UseClip �I�v�V�����͕����w�肷
			�邱�Ƃ��ł��܂��B
	UseTexture : �e�N�X�`��(�ό`�X�v���C�g)���g�p����ꍇ�Ɏw�肵�܂��B
	UseLight : �����x�N�g���Ɩ@���x�N�g���Ƃ̓��ςɂ��|���S���̃J���[��
		�I�t�Z�b�g���|�����Â�\�����܂��B
		UseTexture �� �����ɂ͎g�p�ł��܂���B
	UseClip : �傫�ȃ|���S�����g�p����ꍇ�A�\���ʒu���I�[�o�[�t���[���Đ�
		�����\���ł��Ȃ��悤�Ȏ��Ɏg�p���܂��B

    .data.w	TextNum		; �e�N�X�`�����g�p����ꍇ�A�L�����N�^�̓o�^��
				  ���Ƃ��Ďg�p���܂��B
    .data.w	DispMode	; �|���S���̕\�����[�h���w�肵�܂��B
				  �w��ł���\�����[�h�ɂ͈ȉ��̂��̂�����܂�
	MSBon : �t���[���o�b�t�@�ւ̏������݂ɂ����čŏ�ʃr�b�g�݂̂��P�ɂ��܂��B
		(�X�v���C�g�ւ̃V���h�E�͒ʏ킱����g�p���܂�)
	HSSon : �n�C�X�s�[�h�V�������N�L��
	HSSoff: �n�C�X�s�[�h�V�������N����(default)
	WindowIn : �w�肵���E�B���h�E�̓����ɕ\�����܂��B
	WindowOut : �E�B���h�E�̊O���ɕ\�����܂��B
	NoWindow : (default)�E�B���h�E�ɉe�����ꂸ�ɕ\�����܂��B

	MESHon : ���b�V���ŕ\�����܂��B
	MESHoff : (default)�ʏ�\�������܂��B

	ECdis : �e�N�X�`�����g�p���鎞�A�G���h�R�[�h�𖳌��ɂ��܂��B
	ECenb : (default)�e�N�X�`�����g�p���鎞�A�G���h�R�[�h��L���ɂ��܂��B

	SPdis : �e�N�X�`�����g�p���鎞�A�X�y�[�X�𖳌�(�p���b�g�O�̃J���[��
		�\��)�ɂ��܂��B
		�������A�t���[���o�b�t�@�ւ̏������݃f�[�^�� �O�O�O�O�ɂȂ�
		�ꍇ�ɂ́A�\������܂���̂ŁA�v���C�I���e�B���̒l�𒲐�����
		�O�O�O�O�ɂȂ�Ȃ��悤�ɂ��ĉ������B
	SPenb : (default)�e�N�X�`�����g�p����Ƃ��A�X�y�[�X��L���ɂ��܂��B

	CL16Bnk : (default)�e�N�X�`���̃J���[���[�h���P�U�F�̃J���[�o���N����
		�ɂ��܂��B
	CL16Look : �e�N�X�`���̃J���[���[�h���P�U�F�̃��b�N�A�b�v�e�[�u������
		�ɂ��܂��B
	CL64Bnk : �e�N�X�`���̃J���[���[�h���U�S�F�̃J���[�o���N�����ɂ��܂��B
	CL128Bnk : �e�N�X�`���̃J���[���[�h���P�Q�W�F�̃J���[�o���N�����ɂ���
		���B
	CL256Bnk : �e�N�X�`���̃J���[���[�h���Q�T�U�F�̃J���[�o���N�����ɂ���
		���B
	CL32KRGB : �e�N�X�`���̃J���[���[�h���R�Q�O�O�O�F�̂q�f�a�����ɂ��܂�

	CLrepl : (default)�����������[�h�ɂ��܂��B
	CLtrans : �������ŕ\�����܂��B
	CLhalf : ���P�x�ŕ\�����܂��B
	CLshadow : �V���h�E�\���ɂ��܂��B
	CLgouraud : �O�[���[�V�F�[�f�B���O���w�肵�܂��B

	�\�����[�h�͊e�O���[�v�̂����ꂩ�ЂƂ����w�肵�܂��B

    .data.w	Color		; �\���J���[���w�肵�܂��B
	�����̉e�����󂯂�ꍇ�A�܂��A�\�����[�h�� CLrepl �ȊO���w�肷��ꍇ��
	�͂q�f�a���[�h�łȂ���΂Ȃ�܂���B
	�܂��A�e�N�X�`�����g�p����ꍇ�ŁACL32KRGB���[�h�̏ꍇ�ɂ́A�����ł̎w
	��͖�������܂��B

    .data.w	GouraudTable	; �O�[���[�V�F�[�f�B���O�e�[�u�����w�肵�܂��B
	CLgouraud ���w�肵���ꍇ�A�O�[���[�V�F�[�f�B���O�e�[�u���̃I�t�Z�b�g��
	�u���w�����܂��B�I�t�Z�b�g�ʒu�͂r�����������u�q�`�l(�O���Q�T�b�O�O�O�O
	)���O�Ƃ��A�W�o�C�g���ƂɂP�i�ޒl�Ŏw�肵�܂��B
	�Ⴆ�΁A�O���Q�T�b�P�Q�O�O�O�Ƀf�[�^������ꍇ
	(�Q�T�b�P�Q�O�O�O�|�Q�T�b�O�O�O�O�O)�^�W �� �Q�S�O�O
						(���l�͂��ׂĂP�U�i��)

    .data.w	Function	; �X�v���C�g�\���t�@���N�V�������w�肵�܂��B
	�|���S���A�e�N�X�`���A�|�����C���̂�����Ƃ��ĕ\�����邩���w�肵�܂��B
	�w��ɂ͈ȉ��̂U����ЂƂ�I�т܂��B
	sprNoflip  : �e�N�X�`����\�����܂��B
	sprHflip   : �e�N�X�`�����������ɔ��]���ĕ\�����܂��B
	sprVflip   : �e�N�X�`�����c�����ɔ��]���ĕ\�����܂��B
	sprHVflip  : �e�N�X�`�����c�A���o���ɔ��]���ĕ\�����܂��B
	sprPolygon : �|���S���Ƃ��ĕ\�����܂��B
	sprPolyLine: �|�����C��(�|���S���̗֊s�̂�)��\�����܂��B

    �b����Ńe�[�u�����쐬����ꍇ�AATTR�^���錾����Ă���AATTRIBUTE
    �}�N�����g�p���邱�ƂŁA��L�̃f�[�^�e�[�u�����쐬���邱�Ƃ��ł��܂��B
  ��)
	static ATTR attr_CUBE[] = {
	    ATTRIBUTE(Single_Plane,SORT_MIN,No_Texture,CD_MediumGreen  ,
				No_Gouraud,Window_In,sprPolygon,UseLight) ,
	    ATTRIBUTE(Single_Plane,SORT_MIN,No_Texture,CD_MediumBlue   ,
				No_Gouraud,Window_In,sprPolygon,UseLight) ,
	    ATTRIBUTE(Single_Plane,SORT_MIN,No_Texture,CD_MediumMagenta,
				No_Gouraud,Window_In,sprPolygon,UseLight) ,
	    ATTRIBUTE(Single_Plane,SORT_MIN,No_Texture,CD_MediumWhite  ,
				No_Gouraud,Window_In,sprPolygon,UseLight) ,
	    ATTRIBUTE(Single_Plane,SORT_MIN,No_Texture,CD_MediumYellow ,
				No_Gouraud,Window_In,sprPolygon,UseLight) ,
	    ATTRIBUTE(Single_Plane,SORT_MIN,No_Texture,CD_MediumRed    ,
				No_Gouraud,Window_In,sprPolygon,UseLight)
	} ;

�� �X�v���C�g�\���֐��p�̃A�g���r���[�g�ɂ���

  slPutSprite() �AslDispSprite() �Ŏg�p����A�g���r���[�g�e�[�u���́A��L�̃|
  ���S���p�̂��̂Ƃقړ����ł����A�擪�̂Q�̃f�[�^���Ȃ��Ȃ��Ă��܂��B
    �b����ł��̃e�[�u�����쐬����ꍇ�ASPR_ATTR�^���錾����Ă���A
  SPR_ATTRIBUTE�}�N�����g�p���邱�Ƃ��ł��܂��B
  ��)
	SPR_ATTR attr_AM2Logo = {
	    SPR_ATTRIBUTE(PN_AM2_Logo,CL_AM2_Logo,No_Gouraud,Window_In|ECdis,
		sprNoflip|_ZmCB)
	} ;

	_ZmCB �̓|�W�V�������X�v���C�g�̂ǂ̈ʒu���w�������w�肷����̂ŁA
	�ȉ��̂X����`����Ă��܂��B

	_ZmLT	_ZmCT	_ZmRT
	   +-------+-------+
	   |       |       |
     _ZmLC +----_ZmCC------+ _ZmRC
	   |       |       |
	   +-------+-------+
	_ZmLB	_ZmCB	_ZmRB

�� �X�v���C�g�\���T���v��

#define		CGtop			0x10000
#define		TEXTBL(hs,vs,cga)	{hs , vs , (cga)>>3 , ((hs)&0x1f8)<<5|(vs)}
#define		AdjCG(cga,hs,vs,col)	((cga + (((hs)*(vs)*4)>>(col)) + 0x1f) & 0x7ffe0)
#define		PICTBL(txno,cmod,cga)	{txno , cmod , cga}
#define		CL_Triangle		0x00

    static const Uint16 triangle[] = {
	0x0000,0x0001,0x1000,0x0000,	/* �X�v���C�g�̃L�����N�^�f�[�^ */
	0x0000,0x0012,0x2100,0x0000,
	0x0000,0x0123,0x3210,0x0000,
	0x0000,0x1234,0x4321,0x0000,
	0x0001,0x2344,0x4432,0x1000,
	0x0012,0x3333,0x3333,0x2100,
	0x0122,0x2222,0x2222,0x2210,
	0x1111,0x1111,0x1111,0x1111
    } ;

    enum patn{
	PN_Triangle ,			/* �X�v���C�g�p�^�[���i���o�[ */

	Max_Texture ,			/* ���p�^�[���� */
	Max_Picture = Max_Texture	/* ���L�����N�^�� */
    } ;

    enum cga{				/* �L�����N�^�A�h���X */
	CG_Triangle = CGtop ,
	CG_Next = AdjCG(CG_Triangle,16,8,COL_16)
    } ;

    TEXTURE form_tbl[]={		/* �p�^�[���T�C�Y�f�[�^ */
        TEXTBL(16,8,CG_Triangle)
    } ;

    PICTURE pic_tbl[]={			/* �L�����N�^��`�e�[�u�� */
        PICTBL(PN_Triangle,COL_16,triangle)
    } ;

    static const Sint16 Triangle_Color[] = {	/* �J���[�f�[�^ */
                        RGB(0,0,31) , RGB(0,0,29) , RGB(0,0,27) ,
          RGB(0,0,25) , RGB(0,0,23) , RGB(0,0,21) , RGB(0,0,19) ,
          RGB(0,0,17) , RGB(0,0,15) , RGB(0,0,13) , RGB(0,0,11) ,
          RGB(0,0,9)  , RGB(0,0,7)  , RGB(0,0,5)  , RGB(0,0,3)
    } ;

    typedef struct{			/* �J���[��`�p�\���� */
	Sint16	    *src ;
	void	    *dst ;
	Sint16	     size ;
    } COLMAP ;

    static const COLMAP ctrns_list[] = {	/* �J���[��`�e�[�u�� */
        {Triangle_Color,(void*)(VDP2_COLRAM+(CL_Triangle+1)*2),sizeof(Triangle_Color)}
    } ;

    extern TEXTURE *FormTbl ;

/*						*/
/*  �L�����N�^�f�[�^�]��			*/
/*						*/

void SetTexture(PICTURE *pcptr , Uint32 NbPicture){
    TEXTURE *txptr ;

    for(; NbPicture-- > 0 ; pcptr++){
        txptr = FormTbl + pcptr->texno ;
        slDMACopy(pcptr->pcsrc , (void *)(SpriteVRAM + ((txptr->CGadr) << 3)) , (txptr->Hsize * txptr->Vsize * 4) >> (pcptr->cmode)) ;
    }
}

/*						*/
/*  �J���[�f�[�^�]��				*/
/*						*/

void SetColor(){
    COLMAP      *cmptr ;
    Sint16       cnt ;

    slTVOff() ;
    cmptr= ctrns_list ;
    for(cnt = sizeof(ctrns_list) / sizeof(COLMAP) ; cnt-- > 0 ; cmptr++){
        slDMACopy(cmptr->src , cmptr->dst , cmptr->size) ;
    }
    slTVOn() ;
}

/*  �T���v���L�����N�^�\���ʒu */
    FIXED  tpos[] = {toFIXED(10.0) , toFIXED(20.0) , toFIXED(200.0) , toFIXED(4.0)} ;
/*			|		|		|		 |__ �\���X�P�[��			*/
/*			�w�ʒu		�x�ʒu		�y�ʒu		 |__ (���{ �Ȃ� toFIXED(ORIGINAL) ���w��̂���)	*/

/*  �T���v���L�����N�^�f�[�^ */
    SPR_ATTR tattr = SPR_ATTRIBUTE(PN_Triangle,CL_Triangle,No_Gouraud,CL16Bnk,sprNoflip|_ZmCC) ;
/*					|	    |		|	|	  |	  |__ ��]���S�ʒu */
/*					|	    |		|	|	  |__ �L�����N�^���]�͂Ȃ� */
/*					|	    |		|	|__ �P�U�F�J���[�o���N���[�h	   */
/*					|	    |		|___ �O�[���[�V�F�[�f�B���O�͎g�p���Ȃ�	   */
/*				�p�^�[���i���o�[  �J���[�o���N�i���o�[					   */

main(){
    ANGLE	ang = DEGtoANG(0.0) ;

    *(Uint32 *)(0x06002500) = (Uint32)(0x060007f0) ;
/*  �N���b�N�`�F���W���̓T�E���h�p�̂U�W�j���X�C�b�`�f�[�^��ǂ݁A�����ɃZ�b�g���ꂽ
    �A�h���X�Ƀf�[�^��p�ӂ���炵���̂����A���܂������Ă��Ȃ��悤�Ȃ̂ŁA�Ƃ肠����
    ������Ă��Ȃ��f�[�^�O���e�e�e�e�̂���A�h���X�����Ă��� */

    slInitSystem(TV_320x224 , form_tbl , 1) ;	/* �V�X�e�������� */
    SetTexture(pic_tbl , Max_Picture) ;		/* �L�����N�^�f�[�^�̃Z�b�g */
    SetColor() ;				/* �J���[�f�[�^�̃Z�b�g */
    while(-1){
	slDispSprite(tpos , &tattr , ang) ;	/* �X�v���C�g�̓o�^ */
	ang += DEGtoANG(3.0) ;
	slSynch() ;				/* ��ʕ\���ւ̓����Ƃ̃X�v���C�g�o�� */
    }
}
