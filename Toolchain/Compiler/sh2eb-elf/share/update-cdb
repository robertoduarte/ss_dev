#!/usr/bin/env python

import json
import os
import sys
import locale

PRUNED_FILE_EXTS = [".sx", ".cxx"]

PRUNE_COMPILER_FLAGS = [
    # This flag causes major issues with Clang. Having this flag present in the
    # JSON compilation database results in fatal errors
    "-save-temps"
]


def run(compiler_executable, input_file, output_file, directory, out_stream, flags):
    def build_cdb(out_stream):
        try:
            out_stream.seek(0)
            return json.load(out_stream)
        except Exception as exception:
            return []

    def write_cdb(cdb, out_stream, pretty_print=True):
        out_stream.seek(0)
        out_stream.truncate()
        json.dump(cdb, out_stream, indent=(4 if pretty_print else None))

    def prune_flags(flags):
        return tuple([flag for flag in flags if flag not in PRUNE_COMPILER_FLAGS])

    def new_cdb_entry(compiler_executable, input_file, output_file, directory, flags):
        arguments = (
            [compiler_executable] + list(flags) + ["-c", input_file, "-o", output_file]
        )
        return {
            # The main translation unit source processed by this compilation
            # step. This is used by tools as the key into the compilation
            # database. There can be multiple command objects for the same file,
            # for example if the same source file is compiled with different
            # configurations.
            "file": input_file,
            # The working directory of the compilation. All paths specified in
            # the command or file fields must be either absolute or relative to
            # this directory.
            "directory": directory,
            # The compile command executed. After JSON unescaping, this must be
            # a valid command to rerun the exact compilation step for the
            # translation unit in the environment the build system uses.
            # Parameters use shell quoting and shell escaping of quotes, with
            # '"' and '\' being the only special characters.
            #
            # Shell expansion is not supported.
            "command": " ".join(arguments),
            # The compile command executed as list of strings. Either arguments
            # or command is required.
            #
            # It's best to support both as some tool may read one but not the
            # other.
            "arguments": arguments,
        }

    def append_cdb(cdb, new_cdb_entry):
        return [
            cdb_entry for cdb_entry in cdb if cdb_entry["file"] != new_cdb_entry["file"]
        ] + [new_cdb_entry]

    _, ext_input_file = os.path.splitext(input_file)
    if ext_input_file.lower() in PRUNED_FILE_EXTS:
        return
    # Parse output CDB
    cdb = build_cdb(out_stream)
    # print("cdb: {}".format(cdb))
    pruned_flags = prune_flags(flags)
    # print("pruned_flags: {}".format(pruned_flags))
    cdb_entry = new_cdb_entry(
        compiler_executable, input_file, output_file, directory, pruned_flags
    )
    # print("cdb_entry: {}".format(cdb_entry))
    updated_cdb = append_cdb(cdb, cdb_entry)
    # print("updated_cdb: {}".format(updated_cdb))
    if len(updated_cdb) > len(cdb):
        write_cdb(updated_cdb, out_stream, pretty_print=False)


if __name__ == "__main__":
    compiler_executable = sys.argv[1]
    input_file = sys.argv[2]
    output_file = sys.argv[3]
    directory = sys.argv[4]
    flags = sys.argv[6:]

    with open(sys.argv[5], "a+") as out_stream:
        run(compiler_executable, input_file, output_file, directory, out_stream, flags)
